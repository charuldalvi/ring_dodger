/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: aung (https://sketchfab.com/aung)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/788a90ba58eb45c3898c59c404fb263c
title: Space Ship
*/

import React, { useLayoutEffect, useRef, useState } from "react";
import { PositionalAudio, useGLTF } from "@react-three/drei";
import { useFrame } from "react-three-fiber";
import { useSpring, a } from "react-spring/three";
import {
  shipPositionState,
  enemyPositionState,
  pointcheckerPositionState,
  scoreState,
  ringPositionState,
  meteorPositionState,
  lifelinepointPositionState
} from "./gameState";
import { useRecoilState, useRecoilValue, useResetRecoilState } from "recoil";
import { useBox, usePlane, useSphere } from "@react-three/cannon";
import useStore from './store'
import { Redirect, Route, Router, Switch } from "react-router";
import { createBrowserHistory } from "history";
import GameOverUI from "./GameOverUI";


const history = createBrowserHistory();


// Calculate the distance between two points in 3d space.
// Used to detect lasers intersecting with points.
function distance(p1, p2) {
  const a = p2.x - p1.x;
  const b = p2.y - p1.y;
  const c = p2.z - p1.z;

  return Math.sqrt(a * a + b * b + c * c);
}

export default function Model(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/Space Explorer/spaceship/scene.gltf");

 

  const newScore = useStore(state => state.score)
  
  const incrementScore = useStore(state => state.incrementScore)
  const incrementlifeline = useStore(state => state.incrementtLifeline)

  const [shipPosition, setshipPosition] = useRecoilState(shipPositionState);
  const [points, setPoints] = useRecoilState(pointcheckerPositionState);
  const [meteors, setMeteors] = useRecoilState(meteorPositionState);
  const [rings, setRings] = useRecoilState(ringPositionState);
  const [score, setScore] = useRecoilState(scoreState);
  const [lifelinepoints, setLifelinePoints] = useRecoilState(lifelinepointPositionState);

  const decrementLifeline = useStore((state) => state.decrementLifeline);
  const lifeline = useStore((state) => state.lifeline);
  const reset = useStore((state) => state.reset);
  const setReset = useStore((state) => state.setResetTrue);


  const [expand, setExpand] = useState(true);

  // const [ref, api] = useBox(() => ({
  //   mass: 0,
  //   args: [1,1,1],
  // }));


  const p = useSpring({
    scale: expand ? [0.8, 1.57, 0.35] : [0.4, 1.2, 0.15],
  });

  useFrame(({ mouse }) => {
    setshipPosition({
      position: { x: mouse.x * 5, y: mouse.y * 2 },
      rotation: { z: mouse.x * 0.5, x: -mouse.x * 0.5, y: -mouse.y * 0.2 },
    });
  });
  // Update the ships position from the updated state.
  useFrame((state) => {
    group.current.rotation.z = shipPosition.rotation.z;
    group.current.rotation.y = shipPosition.rotation.x;
    group.current.rotation.x = shipPosition.rotation.y;
    group.current.position.y = shipPosition.position.y;
    group.current.position.x = shipPosition.position.x;

    const {camera} = state;

    const hitPoints = points
      ? points.map (
          (point) =>
            points.filter((en) => distance(group.current.position, point) < 3)
              .length > 0
        )
      : [];

    // console.log(hitPoints);

    if (hitPoints.includes(true) && points.length > 0) {
      // setScore(score + 10);
      incrementScore()
    }

    // Move all of the points. Remove points that have been destroyed, or passed the player.
    setPoints(
      points
        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))
        .filter((enemy, idx) => !hitPoints[idx] )
    );

    




    const hitLifelinePoints = lifelinepoints
    ? lifelinepoints.map (
        (point) =>
          lifelinepoints.filter((en) => distance(group.current.position, point) < 3)
            .length > 0
      )
    : [];

  // console.log(hitLifelinePoints);

  if (hitLifelinePoints.includes(true) && lifelinepoints.length > 0) {
    console.log('lifeline increment');
    incrementlifeline()
  }

  // Move all of the points. Remove points that have been destroyed, or passed the player.
  setLifelinePoints(
    lifelinepoints
      .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))
      .filter((enemy, idx) => !hitLifelinePoints[idx] )
  );





    const hitMeteors = meteors
      ? meteors.map (
          (meteor) =>
            meteors.filter((en) => distance(group.current.position, meteor) < 1)
              .length > 0
        )
      : [];

    // console.log(hitPoints);

    if (hitMeteors.includes(true) && meteors.length > 0) {
      console.log(('spaceship hit'));
      if(lifeline < 1) {
        setReset()
        console.log(lifeline);
      }
      else {
        decrementLifeline()
      }


      
    }

    // Move all of the points. Remove points that have been destroyed, or passed the player.
    setMeteors(
      meteors
        .map((meteor) => ({ x: meteor.x, y: meteor.y, z: meteor.z }))
        .filter((meteor, idx) => !hitMeteors[idx] )
    );
  });

  return (
    <group ref={group} {...props} dispose={null} name={"Spaceship"}>
      
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group position={[-0.11, 0.11, -1]} rotation={[0, 0, Math.PI / 2]}>
          <a.group
            position={[-0.05, 0, 1.05]}
            rotation={[0, 0, -Math.PI / 2]}
            scale={[0.8, 1.57, 0.35]}
          >
            <mesh
              material={materials["Material.005"]}
              geometry={nodes.newss_0.geometry}
              material-transparent
              material-opacity={1}
            />
            <mesh
              material={materials["Material.002"]}
              geometry={nodes.newss_1.geometry}
              material-transparent
              material-opacity={1}
            />
            <mesh
              material={materials["Material.008"]}
              geometry={nodes.newss_2.geometry}
              material-transparent
              material-opacity={1}
            />
            <mesh
              material={materials["Material.003"]}
              geometry={nodes.newss_3.geometry}
              material-transparent
              material-opacity={1}
            />
            <mesh
              material={materials["Material.004"]}
              geometry={nodes.newss_4.geometry}
              material-transparent
              material-opacity={1}
            />
            <mesh
              material={materials["Material.004"]}
              geometry={nodes.newss_4_1.geometry}
              material-transparent
              material-opacity={1}
            />
          </a.group>
        </group>
      </group>
      <ambientLight intensity={0.2} />
      {/* <PositionalAudio url={SpaceSound} distance={1} loop /> */}
      
      
    </group>
  );
}

useGLTF.preload("/Space Explorer/spaceship/scene.gltf");
