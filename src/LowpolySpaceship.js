/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { PositionalAudio, useGLTF } from "@react-three/drei";
import { useFrame, useLoader } from "react-three-fiber";
import { useSpring, a } from "react-spring/three";
import {
  shipPositionState,
  enemyPositionState,
  pointcheckerPositionState,
  scoreState,
  ringPositionState,
  meteorPositionState,
  lifelinepointPositionState,
} from "./gameState";
import { useRecoilState, useRecoilValue, useResetRecoilState } from "recoil";
import { useBox, usePlane, useSphere } from "@react-three/cannon";
import useStore from "./store";
import { Redirect, Route, Router, Switch } from "react-router";
import { createBrowserHistory } from "history";
import GameOverUI from "./GameOverUI";
import * as THREE from "three";

// Calculate the distance between two points in 3d space.
// Used to detect lasers intersecting with points.
function distance(p1, p2) {
  const a = p2.x - p1.x;
  const b = p2.y - p1.y;
  const c = p2.z - p1.z;

  return Math.sqrt(a * a + b * b + c * c);
}

export default function Model(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF(
    "/Space Explorer/Low_Poly_Spaceship/low_poly_spaceship.glb"
  );

  const colorMap = useLoader(
    THREE.TextureLoader,
    "/Space Explorer/Low_Poly_Spaceship/spaceshipbody_col.jpg"
  );
  const metalnessMap = useLoader(
    THREE.TextureLoader,
    "/Space Explorer/Low_Poly_Spaceship/spaceship_metal.jpg"
  );
  const roughnessMap = useLoader(
    THREE.TextureLoader,
    "/Space Explorer/Low_Poly_Spaceship/spaceship_rough.jpg"
  );
  const emissiveMap = useLoader(
    THREE.TextureLoader,
    "/Space Explorer/Low_Poly_Spaceship/spaceship_Emm.png"
  );

  const newScore = useStore((state) => state.score);

  const incrementScore = useStore((state) => state.incrementScore);
  const incrementlifeline = useStore((state) => state.incrementtLifeline);

  const [shipPosition, setshipPosition] = useRecoilState(shipPositionState);
  const [points, setPoints] = useRecoilState(pointcheckerPositionState);
  const [meteors, setMeteors] = useRecoilState(meteorPositionState);
  const [rings, setRings] = useRecoilState(ringPositionState);
  const [score, setScore] = useRecoilState(scoreState);
  const [lifelinepoints, setLifelinePoints] = useRecoilState(
    lifelinepointPositionState
  );

  const decrementLifeline = useStore((state) => state.decrementLifeline);
  const lifeline = useStore((state) => state.lifeline);
  const reset = useStore((state) => state.reset);
  const setReset = useStore((state) => state.setResetTrue);

  const [expand, setExpand] = useState(true);

  // const [ref, api] = useBox(() => ({
  //   mass: 0,
  //   args: [1,1,1],
  // }));

  const p = useSpring({
    scale: expand ? [0.8, 1.57, 0.35] : [0.4, 1.2, 0.15],
  });

  useFrame(({ mouse }) => {
    setshipPosition({
      position: { x: mouse.x * 5, y: mouse.y * 2 },
      rotation: { z: mouse.x * 0.5, x: -mouse.x * 0.5, y: -mouse.y * 0.2 },
    });
  });
  // Update the ships position from the updated state.
  useFrame((state) => {
    group.current.rotation.z = shipPosition.rotation.z;
    group.current.rotation.y = shipPosition.rotation.x;
    group.current.rotation.x = shipPosition.rotation.y;
    group.current.position.y = shipPosition.position.y;
    group.current.position.x = shipPosition.position.x;

    const { camera } = state;

    const hitPoints = points
      ? points.map(
          (point) =>
            points.filter((en) => distance(group.current.position, point) < 3)
              .length > 0
        )
      : [];

    // console.log(hitPoints);

    if (hitPoints.includes(true) && points.length > 0) {
      // setScore(score + 10);
      incrementScore();
    }

    // Move all of the points. Remove points that have been destroyed, or passed the player.
    setPoints(
      points
        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))
        .filter((enemy, idx) => !hitPoints[idx])
    );

    const hitLifelinePoints = lifelinepoints
      ? lifelinepoints.map(
          (point) =>
            lifelinepoints.filter(
              (en) => distance(group.current.position, point) < 3
            ).length > 0
        )
      : [];

    // console.log(hitLifelinePoints);

    if (hitLifelinePoints.includes(true) && lifelinepoints.length > 0) {
      console.log("lifeline increment");
      incrementlifeline();
    }

    // Move all of the points. Remove points that have been destroyed, or passed the player.
    setLifelinePoints(
      lifelinepoints
        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))
        .filter((enemy, idx) => !hitLifelinePoints[idx])
    );

    const hitMeteors = meteors
      ? meteors.map(
          (meteor) =>
            meteors.filter((en) => distance(group.current.position, meteor) < 1)
              .length > 0
        )
      : [];

    // console.log(hitPoints);

    if (hitMeteors.includes(true) && meteors.length > 0) {
      console.log("spaceship hit");
      if (lifeline < 1) {
        setReset();
        console.log(lifeline);
      } else {
        decrementLifeline();
      }
    }

    // Move all of the points. Remove points that have been destroyed, or passed the player.
    setMeteors(
      meteors
        .map((meteor) => ({ x: meteor.x, y: meteor.y, z: meteor.z }))
        .filter((meteor, idx) => !hitMeteors[idx])
    );
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        material={materials.blinn1}
        geometry={nodes.Spaceship_geo.geometry}
        rotation={[Math.PI / 2, 0, Math.PI / 2]}
        scale={[0.1, 0.1, 0.1]}
      >
        <meshPhysicalMaterial
          attach="material"
          map={colorMap}
          metalnessMap={metalnessMap}
          roughnessMap={roughnessMap}
          emissiveMap={emissiveMap}
          metalness={0.5}
          roughness={1}
          emissiveIntensity={1}
          emissive={0xffffff}
          transparent
          opacity={1}
          map-flipY={false}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/Space Explorer/Low_Poly_Spaceship/low_poly_spaceship.glb");
