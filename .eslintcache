[{"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\index.js":"1","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\reportWebVitals.js":"2","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\App.js":"3","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\gameState.js":"4","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\SpaceShip.js":"5","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Planet.js":"6","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Rings.js":"7","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Effects.js":"8","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\PointChecker.js":"9","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Background.js":"10","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Rig.js":"11","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Black_Meteor.js":"12","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\White_Meteor.js":"13","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Meteor.js":"14","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\UI.js":"15","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\WhiteMeteor.js":"16","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\store.js":"17","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Gameplay.js":"18","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\GameplayUI.js":"19","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\MenuUI.js":"20","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\GameOverUI.js":"21","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\PlanetInfo.js":"22","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\GameplayNext.js":"23","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\New_Spaceship.js":"24","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Model.js":"25","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\BlackHole.js":"26","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\LifelineRings.js":"27","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\LowpolySpaceship.js":"28"},{"size":500,"mtime":1606645153288,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1606645153288,"results":"31","hashOfConfig":"30"},{"size":877,"mtime":1616565941869,"results":"32","hashOfConfig":"30"},{"size":5279,"mtime":1616250540927,"results":"33","hashOfConfig":"30"},{"size":6948,"mtime":1616266337680,"results":"34","hashOfConfig":"30"},{"size":2377,"mtime":1615387435242,"results":"35","hashOfConfig":"30"},{"size":2591,"mtime":1616669273800,"results":"36","hashOfConfig":"30"},{"size":1187,"mtime":1631994882133,"results":"37","hashOfConfig":"30"},{"size":1788,"mtime":1616245690398,"results":"38","hashOfConfig":"30"},{"size":2022,"mtime":1616585095559,"results":"39","hashOfConfig":"30"},{"size":1944,"mtime":1613222321910,"results":"40","hashOfConfig":"41"},{"size":3053,"mtime":1613475109098,"results":"42","hashOfConfig":"30"},{"size":1304,"mtime":1613475671440,"results":"43","hashOfConfig":"30"},{"size":2513,"mtime":1615287398345,"results":"44","hashOfConfig":"30"},{"size":377,"mtime":1613482195953,"results":"45","hashOfConfig":"30"},{"size":1527,"mtime":1613631332197,"results":"46","hashOfConfig":"41"},{"size":781,"mtime":1616251000497,"results":"47","hashOfConfig":"30"},{"size":16808,"mtime":1636462928127,"results":"48","hashOfConfig":"30"},{"size":1653,"mtime":1615362341116,"results":"49","hashOfConfig":"30"},{"size":1721,"mtime":1616237429110,"results":"50","hashOfConfig":"30"},{"size":1298,"mtime":1616254289342,"results":"51","hashOfConfig":"30"},{"size":2388,"mtime":1616566158381,"results":"52","hashOfConfig":"30"},{"size":10687,"mtime":1616566166735,"results":"53","hashOfConfig":"30"},{"size":5065,"mtime":1615462031855,"results":"54","hashOfConfig":"41"},{"size":5057,"mtime":1615462791710,"results":"55","hashOfConfig":"30"},{"size":1058,"mtime":1615992508136,"results":"56","hashOfConfig":"30"},{"size":2387,"mtime":1616669280708,"results":"57","hashOfConfig":"30"},{"size":6211,"mtime":1616658891838,"results":"58","hashOfConfig":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"gn67yz",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"61"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"61"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d8063j",{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"61"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"61"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"61"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"61"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"61"},"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\index.js",[],["133","134"],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\reportWebVitals.js",[],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\App.js",["135","136"],"import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\nimport PlanetInfo from \"./PlanetInfo\";\nimport GameOverUI from \"./GameOverUI\";\nimport Gameplay from \"./Gameplay\";\nimport GameplayNext from \"./GameplayNext\";\nimport MenuUI from \"./MenuUI\";\nimport useStore from \"./store\";\n\n\n\n\nfunction App() {\n  \n  \n\n\n  return (\n   <Router>\n      <div>\n      <Switch>\n        <Route exact = \"true\" path=\"/Space Explorer\" component={MenuUI}/>\n        <Route exact = \"true\" path=\"/Gameplay\" component={Gameplay}/>\n        <Route exact = \"true\" path=\"/GameplayNext\" component={GameplayNext}/>\n        <Route exact = \"true\" path=\"/GameOverUI\" component={GameOverUI}/>\n        <Route exact = \"true\" path=\"/PlanetInfo\" component={PlanetInfo}/>\n        \n      </Switch>\n    </div>\n   </Router>\n  );\n}\n\nexport default App;\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\gameState.js",[],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\SpaceShip.js",["137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: aung (https://sketchfab.com/aung)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/models/788a90ba58eb45c3898c59c404fb263c\ntitle: Space Ship\n*/\n\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { PositionalAudio, useGLTF } from \"@react-three/drei\";\nimport { useFrame } from \"react-three-fiber\";\nimport { useSpring, a } from \"react-spring/three\";\nimport {\n  shipPositionState,\n  enemyPositionState,\n  pointcheckerPositionState,\n  scoreState,\n  ringPositionState,\n  meteorPositionState,\n  lifelinepointPositionState\n} from \"./gameState\";\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\nimport { useBox, usePlane, useSphere } from \"@react-three/cannon\";\nimport useStore from './store'\nimport { Redirect, Route, Router, Switch } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\nimport GameOverUI from \"./GameOverUI\";\n\n\nconst history = createBrowserHistory();\n\n\n// Calculate the distance between two points in 3d space.\n// Used to detect lasers intersecting with points.\nfunction distance(p1, p2) {\n  const a = p2.x - p1.x;\n  const b = p2.y - p1.y;\n  const c = p2.z - p1.z;\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\n\nexport default function Model(props) {\n  const group = useRef();\n  const { nodes, materials } = useGLTF(\"/Space Explorer/spaceship/scene.gltf\");\n\n \n\n  const newScore = useStore(state => state.score)\n  \n  const incrementScore = useStore(state => state.incrementScore)\n  const incrementlifeline = useStore(state => state.incrementtLifeline)\n\n  const [shipPosition, setshipPosition] = useRecoilState(shipPositionState);\n  const [points, setPoints] = useRecoilState(pointcheckerPositionState);\n  const [meteors, setMeteors] = useRecoilState(meteorPositionState);\n  const [rings, setRings] = useRecoilState(ringPositionState);\n  const [score, setScore] = useRecoilState(scoreState);\n  const [lifelinepoints, setLifelinePoints] = useRecoilState(lifelinepointPositionState);\n\n  const decrementLifeline = useStore((state) => state.decrementLifeline);\n  const lifeline = useStore((state) => state.lifeline);\n  const reset = useStore((state) => state.reset);\n  const setReset = useStore((state) => state.setResetTrue);\n\n\n  const [expand, setExpand] = useState(true);\n\n  // const [ref, api] = useBox(() => ({\n  //   mass: 0,\n  //   args: [1,1,1],\n  // }));\n\n\n  const p = useSpring({\n    scale: expand ? [0.8, 1.57, 0.35] : [0.4, 1.2, 0.15],\n  });\n\n  useFrame(({ mouse }) => {\n    setshipPosition({\n      position: { x: mouse.x * 5, y: mouse.y * 2 },\n      rotation: { z: mouse.x * 0.5, x: -mouse.x * 0.5, y: -mouse.y * 0.2 },\n    });\n  });\n  // Update the ships position from the updated state.\n  useFrame((state) => {\n    group.current.rotation.z = shipPosition.rotation.z;\n    group.current.rotation.y = shipPosition.rotation.x;\n    group.current.rotation.x = shipPosition.rotation.y;\n    group.current.position.y = shipPosition.position.y;\n    group.current.position.x = shipPosition.position.x;\n\n    const {camera} = state;\n\n    const hitPoints = points\n      ? points.map (\n          (point) =>\n            points.filter((en) => distance(group.current.position, point) < 3)\n              .length > 0\n        )\n      : [];\n\n    // console.log(hitPoints);\n\n    if (hitPoints.includes(true) && points.length > 0) {\n      // setScore(score + 10);\n      incrementScore()\n    }\n\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\n    setPoints(\n      points\n        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))\n        .filter((enemy, idx) => !hitPoints[idx] )\n    );\n\n    \n\n\n\n\n    const hitLifelinePoints = lifelinepoints\n    ? lifelinepoints.map (\n        (point) =>\n          lifelinepoints.filter((en) => distance(group.current.position, point) < 3)\n            .length > 0\n      )\n    : [];\n\n  // console.log(hitLifelinePoints);\n\n  if (hitLifelinePoints.includes(true) && lifelinepoints.length > 0) {\n    console.log('lifeline increment');\n    incrementlifeline()\n  }\n\n  // Move all of the points. Remove points that have been destroyed, or passed the player.\n  setLifelinePoints(\n    lifelinepoints\n      .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))\n      .filter((enemy, idx) => !hitLifelinePoints[idx] )\n  );\n\n\n\n\n\n    const hitMeteors = meteors\n      ? meteors.map (\n          (meteor) =>\n            meteors.filter((en) => distance(group.current.position, meteor) < 1)\n              .length > 0\n        )\n      : [];\n\n    // console.log(hitPoints);\n\n    if (hitMeteors.includes(true) && meteors.length > 0) {\n      console.log(('spaceship hit'));\n      if(lifeline < 1) {\n        setReset()\n        console.log(lifeline);\n      }\n      else {\n        decrementLifeline()\n      }\n\n\n      \n    }\n\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\n    setMeteors(\n      meteors\n        .map((meteor) => ({ x: meteor.x, y: meteor.y, z: meteor.z }))\n        .filter((meteor, idx) => !hitMeteors[idx] )\n    );\n  });\n\n  return (\n    <group ref={group} {...props} dispose={null} name={\"Spaceship\"}>\n      \n      <group rotation={[-Math.PI / 2, 0, 0]}>\n        <group position={[-0.11, 0.11, -1]} rotation={[0, 0, Math.PI / 2]}>\n          <a.group\n            position={[-0.05, 0, 1.05]}\n            rotation={[0, 0, -Math.PI / 2]}\n            scale={[0.8, 1.57, 0.35]}\n          >\n            <mesh\n              material={materials[\"Material.005\"]}\n              geometry={nodes.newss_0.geometry}\n              material-transparent\n              material-opacity={1}\n            />\n            <mesh\n              material={materials[\"Material.002\"]}\n              geometry={nodes.newss_1.geometry}\n              material-transparent\n              material-opacity={1}\n            />\n            <mesh\n              material={materials[\"Material.008\"]}\n              geometry={nodes.newss_2.geometry}\n              material-transparent\n              material-opacity={1}\n            />\n            <mesh\n              material={materials[\"Material.003\"]}\n              geometry={nodes.newss_3.geometry}\n              material-transparent\n              material-opacity={1}\n            />\n            <mesh\n              material={materials[\"Material.004\"]}\n              geometry={nodes.newss_4.geometry}\n              material-transparent\n              material-opacity={1}\n            />\n            <mesh\n              material={materials[\"Material.004\"]}\n              geometry={nodes.newss_4_1.geometry}\n              material-transparent\n              material-opacity={1}\n            />\n          </a.group>\n        </group>\n      </group>\n      <ambientLight intensity={0.2} />\n      {/* <PositionalAudio url={SpaceSound} distance={1} loop /> */}\n      \n      \n    </group>\n  );\n}\n\nuseGLTF.preload(\"/Space Explorer/spaceship/scene.gltf\");\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Planet.js",["160","161"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: Axt (https://sketchfab.com/shooter24994)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/3d-models/uranus-4d2f0c3674904472ac413fdabbf491d7\ntitle: Uranus\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport {useFrame} from \"react-three-fiber\"\nimport useStore from './store'\nimport { Redirect } from 'react-router'\n\nexport default function PLanet(props) {\n  const group = useRef()\n  const ring = useRef()\n  const { nodes, materials } = useGLTF('/Space Explorer/planet/scene.gltf')\n\n  const nextlevel = useStore((state) => state.nextlevel)\n  const setNextLevel = useStore((state) => state.setNextLevel)\n\n  useFrame(() => {\n    group.current.position.z += 0.1;\n    // group.current.scale.x += 0.0008;\n    // group.current.scale.y += 0.0008;\n    // group.current.scale.z += 0.0008;\n\n    if(group.current.position.z > -0.02) {\n      // group.current.position.z = -180;\n      setNextLevel()\n    }\n  })\n\n\n  return (\n    <group ref={group} {...props} dispose={null} position={[2,0,-202]} >\n      <group rotation={[-Math.PI / 2, 0, 0]} >\n        <group position={[0, 0, 0]} rotation={[-Math.PI, 0, Math.PI]} >\n          <group rotation={[Math.PI / 2, 2, 0]} >\n            <group rotation={[-Math.PI / 2, 0, 0]} scale={[1, 1, 1]}>\n              <mesh material={materials['Material.002']} geometry={nodes.Sphere_Material002_0.geometry} material-transparent material-opacity={1}/>\n            </group>\n            <group ref={ring} rotation={[-Math.PI / 2, 1.37, 0]} scale={[1.5, 1.5, 1.5]}>\n              <mesh material={materials.ring} geometry={nodes.Circle_ring_0.geometry} material-transparent material-opacity={1}/>\n            </group>\n            <group rotation={[-Math.PI / 2, 1.37, 0]} scale={[1.4, 1.4, 1.4]}>\n              <mesh material={materials.ring} geometry={nodes.Circle001_ring_0.geometry} material-transparent material-opacity={1}/>\n            </group>\n            <group rotation={[-Math.PI / 2, 1.37, 0]} scale={[1.3, 1.3, 1.3]}>\n              <mesh material={materials.ring} geometry={nodes.Circle002_ring_0.geometry} material-transparent material-opacity={1}/>\n            </group>\n          </group>\n        </group>\n      </group>\n     \n    </group>\n  )\n}\n\nuseGLTF.preload('/Space Explorer/planet/scene.gltf')\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Rings.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178"],"import React, { useRef, useMemo, useEffect } from \"react\";\r\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport { ringPositionState, pointcheckerPositionState } from \"../gameState\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport Effects from \"./Effects\";\r\nimport {\r\n  MeshDistortMaterial,\r\n  MeshWobbleMaterial,\r\n  PositionalAudio,\r\n} from \"@react-three/drei\";\r\nimport wind from \"../assets/music/wind.ogg\";\r\nimport { useTrimesh } from \"@react-three/cannon\";\r\n\r\nfunction Rings() {\r\n  const rings = useRecoilValue(ringPositionState);\r\n  const ring = useRef();\r\n  const points = useRecoilValue(ringPositionState);\r\n  const point = useRef();\r\n  const leftbox = useRef();\r\n\r\n  const reset = useResetRecoilState(ringPositionState);\r\n\r\n  const [boxgeo, boxmat] = useMemo(() => {\r\n    const boxgeo = new THREE.BoxBufferGeometry(1, 1, 1);\r\n    const boxmat = new THREE.MeshStandardMaterial({\r\n      color: new THREE.Color(0xff0000),\r\n      emissiveIntensity: 1,\r\n      emissive: 0xb0e9ff,\r\n      roughness: 1,\r\n      opacity: 0.2,\r\n    });\r\n\r\n    return [boxgeo, boxmat];\r\n  }, []);\r\n\r\n  const [geo, mat] = useMemo(() => {\r\n    const geo = new THREE.TorusBufferGeometry(2, 0.3, 16, 100, 6.3);\r\n    const mat = new THREE.MeshStandardMaterial({\r\n      color: new THREE.Color(0xb0e9ff),\r\n      emissiveIntensity: 1,\r\n      emissive: 0xb0e9ff,\r\n      roughness: 1,\r\n      opacity: 0,\r\n    });\r\n\r\n    return [geo, mat];\r\n  }, []);\r\n\r\n  useFrame((state) => {\r\n    var clock = state.clock;\r\n    var time = 0;\r\n    var delta = 0;\r\n    var direction = new THREE.Vector3(0, 0, 1);\r\n    var speed = 100; // units a second - 2 seconds\r\n\r\n    delta = clock.getDelta();\r\n    time += delta;\r\n\r\n    // rings.forEach((enemy, i) => {\r\n    //   if (enemy.z >= 860) {\r\n    //     reset();\r\n    //     ring.current.position.addScaledVector(direction, speed * delta);\r\n    //     console.log(speed);\r\n    //   } else {\r\n    //   }\r\n    // });\r\n  });\r\n\r\n  return (\r\n    <group>\r\n      {rings.map((enemy, i) => (\r\n        <mesh\r\n          ref={ring}\r\n          visible={enemy.z > -80 ? true : false}\r\n          position={[enemy.x, enemy.y, enemy.z]}\r\n          key={i}\r\n          geometry={geo}\r\n          material={mat}\r\n          material-transparent\r\n          material-opacity={1}\r\n        ></mesh>\r\n      ))}\r\n\r\n      {rings.map((enemy, i) => (\r\n        <pointLight\r\n          key={i}\r\n          intensity={enemy.z > 0 ? 0 : 0.1}\r\n          position={[enemy.x, enemy.y, enemy.z]}\r\n        />\r\n      ))}\r\n      \r\n    </group>\r\n  );\r\n}\r\n\r\nexport default Rings;\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Effects.js",[],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\PointChecker.js",["179","180","181","182","183"],"import React, { useRef, useMemo } from 'react'\r\nimport { useRecoilValue, useResetRecoilState } from 'recoil';\r\nimport { pointcheckerPositionState } from '../gameState';\r\nimport * as THREE from 'three'\r\nimport { useFrame } from 'react-three-fiber';\r\nimport Effects from './Effects';\r\n\r\nfunction PointChecker() {\r\n    const points = useRecoilValue(pointcheckerPositionState);\r\n    const point = useRef();\r\n  \r\n    const reset = useResetRecoilState(pointcheckerPositionState);\r\n  \r\n    const [geo, mat] = useMemo(() => {\r\n      const geo = new THREE.PlaneBufferGeometry(2,2);\r\n      const mat = new THREE.MeshStandardMaterial({\r\n        color: new THREE.Color(0xFFFFFF),\r\n        opacity: 1,\r\n        visible: true,\r\n      });\r\n      return [geo, mat];\r\n    }, []);\r\n  \r\n    useFrame((state) => {\r\n      var clock = state.clock;\r\n      var time = 0;\r\n      var delta = 0;\r\n      var direction = new THREE.Vector3(0, 0, 1);\r\n      var speed = 100; // units a second - 2 seconds\r\n  \r\n      delta = clock.getDelta();\r\n      time += delta;\r\n      speed += delta;\r\n      \r\n      // points.forEach((p, i) => {  \r\n      //   if (p.z >= 860) {\r\n      //     reset();\r\n      //     point.current.position.addScaledVector(direction, speed * delta);\r\n          \r\n      //   } else {\r\n      //   }\r\n      // });\r\n  \r\n      \r\n    });\r\n  \r\n    \r\n  \r\n    return (\r\n      <group>\r\n        {points.map((enemy, i) => (\r\n          \r\n          <mesh\r\n            ref={point}\r\n            visible={enemy.z > -80 ? true : false}\r\n            position={[enemy.x, enemy.y , enemy.z]}\r\n            key={i}\r\n            geometry={geo}\r\n            material={mat}\r\n            material-transparent\r\n            material-opacity={1}\r\n          />\r\n        ))}\r\n      </group>\r\n    );\r\n}\r\n\r\nexport default PointChecker\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Background.js",["184"],"import React, { useLayoutEffect, useMemo, useRef } from 'react'\r\nimport { useFrame } from 'react-three-fiber';\r\nimport * as THREE from 'three'\r\nimport { AdditiveBlending } from 'three';\r\n\r\nfunction Background() {\r\n\r\n  const ref = useRef()\r\n\r\n    const vertexShader = `\r\n    void main() {\r\n      gl_Position = vec4( position, 1.0 );\r\n  }\r\n  `;\r\n  \r\n    const fragmentShader = `#ifdef GL_ES\r\n    precision mediump float;\r\n    #endif\r\n  \r\n    uniform vec2 u_resolution;\r\n    uniform float u_time;\r\n    uniform float time;\r\n  \r\n    float Cell(vec2 c) {\r\n      vec2 uv = fract(c);\r\n      c -= uv;\r\n      return (1.-length(uv*10.-1.)) * step(fract(sin(c.x+c.y*1e2)*1e3), .04);\r\n    }\r\n  \r\n    void main() {\r\n  \r\n         vec2 p = gl_FragCoord.xy / u_resolution.xy -.5;\r\n         float a = fract(atan(p.x, p.y) / 6.2832);\r\n         float d = length(p);\r\n  \r\n         vec2 coord = vec2(pow(d, .04), a)*256.;\r\n         vec2 delta = vec2(1. + u_time*time, 0.);\r\n  \r\n         float c = Cell(coord-=delta);\r\n         c += Cell(coord-=delta);\r\n  \r\n         gl_FragColor = vec4(c*d*3.);\r\n    }`;\r\n  \r\n    const uniforms = useMemo(\r\n      () => ({\r\n        u_time: { type: \"f\", value: 1.0 },\r\n        time: {type: \"f\", value: 0.6},\r\n        u_resolution: { type: \"v2\", value: new THREE.Vector2() },\r\n      }),\r\n      []\r\n    );\r\n  \r\n    useFrame(() => {\r\n      uniforms.u_time.value += 0.05;\r\n      uniforms.time.value += 0.0001;\r\n    });\r\n  \r\n    useLayoutEffect(() => {\r\n      uniforms.u_resolution.value.x = window.innerWidth;\r\n      uniforms.u_resolution.value.y = window.innerHeight;\r\n      \r\n    });\r\n  \r\n    return (\r\n      <mesh ref={ref}>\r\n        <planeBufferGeometry attach=\"geometry\" args={[2, 2]}/>\r\n        <shaderMaterial\r\n          attach=\"material\"\r\n          uniforms={uniforms}\r\n          vertexShader={vertexShader}\r\n          fragmentShader={fragmentShader}\r\n          transparent={false}\r\n          depthWrite={false}\r\n          depthTest={false}\r\n        />\r\n      </mesh>\r\n    );\r\n}\r\n\r\nexport default Background\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Rig.js",[],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Black_Meteor.js",["185"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: 29938490 (https://sketchfab.com/DeonWoodward)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/models/dbd699a1bf2249a596ecc411ab69679f\ntitle: Moon/ Meteor\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\nimport { useFrame } from 'react-three-fiber'\nimport { meteorPositionState } from './gameState'\nimport { useRecoilValue } from 'recoil'\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('/meteors/scene.gltf')\n\n  const meteors = useRecoilValue(meteorPositionState);\n\n\n  useFrame(() => {\n    group.current.position.z += 0.1;\n    group.current.position.y -= 0.02;\n  })\n\n  return (\n    \n    <group ref={group} {...props} dispose={null} position={props.position}>\n      <group rotation={[-Math.PI / 2, 0, 0]} scale={[0.4, 0.4 , 0.4]} >\n        <group rotation={[-0.27, 0.6, 1.93]} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_1.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_2.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_3.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_4.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_5.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_6.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_7.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_8.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_9.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_10.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_11.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_12.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_13.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_14.geometry} material-transparent material-opacity={1} />\n        <mesh material={materials.Root} geometry={nodes.Icosphere_0_15.geometry} material-transparent material-opacity={1} />\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload('/scene.gltf')\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\White_Meteor.js",[],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\Meteor.js",["186","187","188","189","190"],"import React, { useRef, useMemo } from \"react\";\r\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport {\r\n  ringPositionState,\r\n  pointcheckerPositionState,\r\n  meteorPositionState,\r\n} from \"../gameState\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\n//Physics\r\nimport { useSphere } from \"@react-three/cannon\";\r\nimport { MeshWobbleMaterial } from \"@react-three/drei\";\r\n\r\nconst Meteor = () => {\r\n  const rings = useRecoilValue(meteorPositionState);\r\n  const ring = useRef();\r\n\r\n  const [ref, api] = useSphere(() => ({\r\n    mass: 0,\r\n    args: [3, 12, 12],\r\n    onCollide: (obj) => {\r\n      if (obj.body.name === \"Spaceship\") {\r\n        console.log(\"Spaceship\");\r\n      }\r\n    },\r\n  }));\r\n\r\n  const reset = useResetRecoilState(meteorPositionState);\r\n\r\n  const [geo, mat] = useMemo(() => {\r\n    const geo = new THREE.IcosahedronBufferGeometry(1, 0);\r\n    const mat = new THREE.MeshStandardMaterial({\r\n      color: new THREE.Color(0x808080),\r\n      roughness: 1,\r\n      opacity: 0,\r\n    });\r\n    return [geo, mat];\r\n  }, []);\r\n\r\n  useFrame((state) => {\r\n    var clock = state.clock;\r\n    var time = 0;\r\n    var delta = 0;\r\n    var direction = new THREE.Vector3(0, 0, 1);\r\n    var speed = 100; // units a second - 2 seconds\r\n\r\n    delta = clock.getDelta();\r\n    time += delta;\r\n\r\n    rings.forEach((enemy, i) => {\r\n\r\n      if (enemy.z >= 800) {\r\n        reset();\r\n        ref.current.position.addScaledVector(direction, speed * delta);\r\n\r\n        console.log(speed);\r\n      } else {\r\n      }\r\n    });\r\n  });\r\n\r\n  return (\r\n    <group ref={ref} name={\"Meteor\"}>\r\n      {rings.map((enemy, i) => (\r\n        <mesh\r\n          ref={ring}\r\n          visible={enemy.z > -80 ? true : false}\r\n          position={[enemy.x, enemy.y, enemy.z]}\r\n          key={i}\r\n          geometry={geo}\r\n         \r\n        >\r\n          <MeshWobbleMaterial\r\n            attach=\"material\"\r\n            color=\"grey\"\r\n            factor={1}\r\n            speed={0.2}\r\n          />\r\n        </mesh>\r\n      ))}\r\n      {rings.map((enemy, i) => (\r\n        <mesh\r\n          visible={enemy.z > -80 ? true : false}\r\n          position={[enemy.x, enemy.y, enemy.z]}\r\n          key={i}\r\n        >\r\n          <sphereBufferGeometry attach=\"geometry\" args={[1, 12, 12]} />\r\n          <meshStandardMaterial\r\n            attach=\"material\"\r\n            color={\"cyan\"}\r\n            transparent\r\n            opacity={0}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default Meteor;\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\UI.js",[],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\WhiteMeteor.js",["191","192","193","194","195","196","197","198"],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\store.js",[],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Gameplay.js",["199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],"import { useRef, useState, useMemo, Suspense, useEffect } from 'react'\r\nimport { Canvas, useFrame, useLoader, useThree } from 'react-three-fiber'\r\nimport {\r\n  Html,\r\n  OrbitControls,\r\n  Stars,\r\n  Stats,\r\n  useFBX,\r\n  useProgress,\r\n} from '@react-three/drei'\r\nimport {\r\n  ringPositionState,\r\n  smallringPositionState,\r\n  pointcheckerPositionState,\r\n  meteorPositionState,\r\n  scoreState,\r\n  shipPositionState,\r\n  laserPositionState,\r\n  whitemeteorPositionState,\r\n  blackholePositionState,\r\n  lifelinePositionState,\r\n  lifelinepointPositionState,\r\n} from './gameState'\r\nimport './App.css'\r\nimport { useRecoilState, useRecoilValue } from 'recoil'\r\nimport { RecoilRoot } from 'recoil'\r\nimport * as THREE from 'three'\r\nimport Planet from './Planet.js'\r\nimport SpaceShip from './SpaceShip.js'\r\nimport LowpolySpaceship from './LowpolySpaceship'\r\nimport BlackMeteor from './Black_Meteor'\r\nimport WhiteMeteor from './White_Meteor'\r\n\r\nimport Rings from './components/Rings'\r\nimport PointChecker from './components/PointChecker'\r\nimport Background from './components/Background'\r\nimport Effects from './components/Effects'\r\nimport Meteor from './components/Meteor'\r\nimport UI from './components/UI'\r\nimport { Physics, useBox, useSphere, useTrimesh } from '@react-three/cannon'\r\nimport { Perf } from 'r3f-perf'\r\nimport useStore from './store'\r\nimport GameplayUI from './GameplayUI'\r\nimport { Redirect } from 'react-router'\r\nimport BlackHole from './components/BlackHole'\r\nimport explosion from './assets/music/Explosion.flac'\r\nimport backgroundMusic from './assets/music/BGM.ogg'\r\nimport LifelineRings from './components/LifelineRings'\r\nimport { useSpring } from 'react-spring'\r\n\r\nlet RING_SPEED = 0.5\r\n\r\n// Game settings.\r\nconst LASER_RANGE = 100\r\nconst LASER_Z_VELOCITY = 1\r\nconst ENEMY_SPEED = 0.1\r\nconst GROUND_HEIGHT = -50\r\nlet METEOR_VELOCITY = -0.5\r\n\r\nlet elapsedTime = 0\r\n\r\nfunction InfiniteRings() {\r\n  let group = useRef()\r\n  let theta = 0\r\n\r\n  let z = 180\r\n\r\n  useFrame(() => {\r\n    // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\r\n    group.current.position.z += 0.5\r\n  })\r\n\r\n  const [geo, mat, coords] = useMemo(() => {\r\n    const geo = new THREE.TorusGeometry(2, 0.3, 16, 100, 6.3)\r\n    const mat = new THREE.MeshStandardMaterial({\r\n      color: new THREE.Color('hotpink'),\r\n      emissiveIntensity: 1,\r\n      emissive: 0xf61379,\r\n      roughness: 1,\r\n      opacity: 1,\r\n      metalness: 1,\r\n    })\r\n    const coords = new Array(2500)\r\n      .fill()\r\n      .map((i) => [Math.random() * 12 - 8, 0, -180 - i * 60])\r\n    return [geo, mat, coords]\r\n  }, [])\r\n  return (\r\n    <group ref={group}>\r\n      {coords.map(([p1, p2, p3], i) => (\r\n        <mesh\r\n          key={i}\r\n          visible={p3 > 20 ? false : true}\r\n          geometry={geo}\r\n          material={mat}\r\n          position={[p1, p2, p3]}\r\n        />\r\n      ))}\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction distance(p1, p2) {\r\n  const a = p2.x - p1.x\r\n  const b = p2.y - p1.y\r\n  const c = p2.z - p1.z\r\n\r\n  return Math.sqrt(a * a + b * b + c * c)\r\n}\r\n\r\n// This component runs game logic on each frame draw to update game state.\r\nfunction GameTimer() {\r\n  const [rings, setRings] = useRecoilState(ringPositionState)\r\n  const [blackhole, setBlackhole] = useRecoilState(blackholePositionState)\r\n  const [smallrings, setsmallRings] = useRecoilState(smallringPositionState)\r\n  const [points, setPoints] = useRecoilState(pointcheckerPositionState)\r\n  const [lifelinepoints, setLifelinePoints] = useRecoilState(\r\n    lifelinepointPositionState\r\n  )\r\n  const [meteor, setMeteor] = useRecoilState(meteorPositionState)\r\n  const [whitemeteor, setWhiteMeteor] = useRecoilState(whitemeteorPositionState)\r\n  const [lasers, setLaserPositions] = useRecoilState(laserPositionState)\r\n  const [lifeline, setLifeLinePosition] = useRecoilState(lifelinePositionState)\r\n\r\n  useFrame(({ mouse, clock }) => {\r\n    RING_SPEED += 0.00005\r\n\r\n    elapsedTime = clock.elapsedTime\r\n\r\n    const hitEnemies = meteor\r\n      ? meteor.map(\r\n          (enemy) =>\r\n            lasers.filter(\r\n              () =>\r\n                lasers.filter((laser) => distance(laser, enemy) < 1).length > 0\r\n            ).length > 0\r\n        )\r\n      : []\r\n\r\n    if (hitEnemies.includes(true) && meteor.length > 0) {\r\n      const audio = new Audio(explosion)\r\n      audio.play()\r\n    }\r\n\r\n    setRings(\r\n      rings.map((ring) => ({ x: ring.x, y: ring.y, z: ring.z + RING_SPEED }))\r\n    )\r\n\r\n    setLifeLinePosition(\r\n      lifeline.map((ring) => ({ x: ring.x, y: ring.y, z: ring.z + RING_SPEED }))\r\n    )\r\n\r\n    setPoints(\r\n      points.map((point) => ({\r\n        x: point.x,\r\n        y: point.y,\r\n        z: point.z + RING_SPEED,\r\n      }))\r\n    )\r\n\r\n    setLifelinePoints(\r\n      lifelinepoints.map((point) => ({\r\n        x: point.x,\r\n        y: point.y,\r\n        z: point.z + RING_SPEED,\r\n      }))\r\n    )\r\n\r\n    setMeteor(\r\n      meteor\r\n        .map((meteor) => ({ x: meteor.x, y: meteor.y, z: meteor.z + 0.8 }))\r\n        .filter((enemy, idx) => !hitEnemies[idx])\r\n    )\r\n\r\n    setBlackhole(\r\n      blackhole.map((hole) => ({\r\n        x: hole.x,\r\n        y: hole.y,\r\n        z: hole.z + RING_SPEED,\r\n      }))\r\n    )\r\n\r\n    // Move the Lasers and remove lasers at end of range or that have hit the ground.\r\n    setLaserPositions(\r\n      lasers\r\n        .map((laser) => ({\r\n          id: laser.id,\r\n          x: laser.x + laser.velocity[0],\r\n          y: laser.y + laser.velocity[1],\r\n          z: laser.z - LASER_Z_VELOCITY,\r\n          velocity: laser.velocity,\r\n        }))\r\n        .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\r\n    )\r\n\r\n    setWhiteMeteor(\r\n      whitemeteor\r\n        .map((met) => ({\r\n          id: met.id,\r\n          x: met.x * Math.random() * 4,\r\n          y: met.y * Math.random() * 2,\r\n          z: met.z - METEOR_VELOCITY,\r\n        }))\r\n        .filter((met) => met.z > 20)\r\n    )\r\n  })\r\n\r\n  return null\r\n}\r\n\r\nconst CameraControls = () => {\r\n  // Get a reference to the Three.js Camera, and the canvas html element.\r\n  // We need these to setup the OrbitControls component.\r\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree()\r\n  // Ref to the controls, so that we can update them on every frame using useFrame\r\n  const controls = useRef()\r\n  useFrame((state) => controls.current.update())\r\n  return (\r\n    <OrbitControls\r\n      ref={controls}\r\n      enableZoom={true}\r\n      enableRotate={true}\r\n      args={[camera, domElement]}\r\n    />\r\n  )\r\n}\r\n\r\nfunction Loader() {\r\n  const { progress } = useProgress()\r\n  return (\r\n    <Html center style={{ color: 'white', fontSize: '25px' }}>\r\n      {parseInt(progress)} % loaded\r\n    </Html>\r\n  )\r\n}\r\n\r\n// An invisible clickable element in the front of the scene.\r\n// Manages creating lasers with the correct initial velocity on click.\r\nfunction LaserController() {\r\n  const shipPosition = useRecoilValue(shipPositionState)\r\n  const [lasers, setLasers] = useRecoilState(laserPositionState)\r\n  return (\r\n    <mesh\r\n      position={[0, 0, 2]}\r\n      onClick={() =>\r\n        setLasers([\r\n          ...lasers,\r\n          {\r\n            id: Math.random(), // This needs to be unique.. Random isn't perfect but it works. Could use a uuid here.\r\n            x: 0,\r\n            y: 0,\r\n            z: 0,\r\n            velocity: [\r\n              shipPosition.rotation.x * 1,\r\n              shipPosition.rotation.y * 2,\r\n            ],\r\n          },\r\n        ])\r\n      }\r\n    >\r\n      <planeBufferGeometry attach='geometry' args={[100, 100]} />\r\n      <meshStandardMaterial\r\n        attach='material'\r\n        color='orange'\r\n        opacity={0.2}\r\n        transparent\r\n        visible={false}\r\n      />\r\n    </mesh>\r\n  )\r\n}\r\n\r\nfunction MeteorController() {\r\n  const [meteor, setMeteor] = useRecoilState(whitemeteorPositionState)\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setMeteor([\r\n        ...meteor,\r\n        {\r\n          id: Math.random(), // This needs to be unique.. Random isn't perfect but it works. Could use a uuid here.\r\n          x: 0,\r\n          y: 0,\r\n          z: 0,\r\n        },\r\n      ])\r\n    }, 500)\r\n  }, [])\r\n\r\n  useFrame(({ clock }) => {\r\n    setMeteor([\r\n      ...meteor,\r\n      {\r\n        id: Math.random(), // This needs to be unique.. Random isn't perfect but it works. Could use a uuid here.\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n      },\r\n    ])\r\n  })\r\n\r\n  return (\r\n    <mesh position={[0, 0, -350]}>\r\n      <planeBufferGeometry attach='geometry' args={[100, 100]} />\r\n      <meshStandardMaterial\r\n        attach='material'\r\n        color='orange'\r\n        opacity={0.2}\r\n        transparent\r\n        visible={false}\r\n      />\r\n    </mesh>\r\n  )\r\n}\r\n\r\nfunction Meteors() {\r\n  const meteors = useRecoilValue(whitemeteorPositionState)\r\n  return (\r\n    <group>\r\n      {meteors.map((laser) => (\r\n        <mesh\r\n          position={[laser.x, laser.y, laser.z]}\r\n          key={`${laser.id}`}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n        >\r\n          <sphereBufferGeometry attach='geometry' args={[1, 12, 12]} />\r\n          <meshStandardMaterial\r\n            attach='material'\r\n            emissive='yellow'\r\n            emissiveIntensity={1}\r\n            color={'white'}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  )\r\n}\r\n\r\n// Draws all of the lasers existing in state.\r\nfunction Lasers() {\r\n  const lasers = useRecoilValue(laserPositionState)\r\n  return (\r\n    <group>\r\n      {lasers.map((laser) => (\r\n        <mesh\r\n          position={[laser.x, laser.y, laser.z]}\r\n          key={`${laser.id}`}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n        >\r\n          <cylinderBufferGeometry attach='geometry' args={[0.1, 0.03, 2, 32]} />\r\n          <meshStandardMaterial\r\n            attach='material'\r\n            emissive='yellow'\r\n            emissiveIntensity={1}\r\n            color={'white'}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction FighterJet() {\r\n  const fbx = useFBX('/Space Explorer/Low_Poly_Spaceship/spaceship.fbx')\r\n\r\n  const group = useRef()\r\n\r\n  const colorMap = useLoader(\r\n    THREE.TextureLoader,\r\n    '/Space Explorer/Low_Poly_Spaceship/spaceshipbody_col.jpg'\r\n  )\r\n  const metalnessMap = useLoader(\r\n    THREE.TextureLoader,\r\n    '/Space Explorer/Low_Poly_Spaceship/spaceship_metal.jpg'\r\n  )\r\n  const roughnessMap = useLoader(\r\n    THREE.TextureLoader,\r\n    '/Space Explorer/Low_Poly_Spaceship/spaceship_rough.jpg'\r\n  )\r\n  const emissiveMap = useLoader(\r\n    THREE.TextureLoader,\r\n    '/Space Explorer/Low_Poly_Spaceship/spaceship_Emm.png'\r\n  )\r\n\r\n  const newScore = useStore((state) => state.score)\r\n\r\n  const incrementScore = useStore((state) => state.incrementScore)\r\n  const incrementlifeline = useStore((state) => state.incrementtLifeline)\r\n\r\n  const [shipPosition, setshipPosition] = useRecoilState(shipPositionState)\r\n  const [points, setPoints] = useRecoilState(pointcheckerPositionState)\r\n  const [meteors, setMeteors] = useRecoilState(meteorPositionState)\r\n  const [rings, setRings] = useRecoilState(ringPositionState)\r\n  const [score, setScore] = useRecoilState(scoreState)\r\n  const [lifelinepoints, setLifelinePoints] = useRecoilState(\r\n    lifelinepointPositionState\r\n  )\r\n\r\n  const decrementLifeline = useStore((state) => state.decrementLifeline)\r\n  const lifeline = useStore((state) => state.lifeline)\r\n  const reset = useStore((state) => state.reset)\r\n  const setReset = useStore((state) => state.setResetTrue)\r\n\r\n  const [expand, setExpand] = useState(true)\r\n\r\n  // const [ref, api] = useBox(() => ({\r\n  //   mass: 0,\r\n  //   args: [1,1,1],\r\n  // }));\r\n\r\n  const p = useSpring({\r\n    scale: expand ? [0.8, 1.57, 0.35] : [0.4, 1.2, 0.15],\r\n  })\r\n\r\n  useFrame(({ mouse }) => {\r\n    setshipPosition({\r\n      position: { x: mouse.x * 5, y: mouse.y * 2 },\r\n      rotation: { z: mouse.x * 0.5, x: -mouse.x * 0.5, y: -mouse.y * 0.2 },\r\n    })\r\n  })\r\n  // Update the ships position from the updated state.\r\n  useFrame((state) => {\r\n    group.current.rotation.z = shipPosition.rotation.z\r\n    group.current.rotation.y = shipPosition.rotation.x\r\n    group.current.rotation.x = shipPosition.rotation.y\r\n    group.current.position.y = shipPosition.position.y\r\n    group.current.position.x = shipPosition.position.x\r\n\r\n    const { camera } = state\r\n\r\n    const hitPoints = points\r\n      ? points.map(\r\n          (point) =>\r\n            points.filter((en) => distance(group.current.position, point) < 3)\r\n              .length > 0\r\n        )\r\n      : []\r\n\r\n    // console.log(hitPoints);\r\n\r\n    if (hitPoints.includes(true) && points.length > 0) {\r\n      // setScore(score + 10);\r\n      incrementScore()\r\n    }\r\n\r\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\r\n    setPoints(\r\n      points\r\n        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))\r\n        .filter((enemy, idx) => !hitPoints[idx])\r\n    )\r\n\r\n    const hitLifelinePoints = lifelinepoints\r\n      ? lifelinepoints.map(\r\n          (point) =>\r\n            lifelinepoints.filter(\r\n              (en) => distance(group.current.position, point) < 3\r\n            ).length > 0\r\n        )\r\n      : []\r\n\r\n    // console.log(hitLifelinePoints);\r\n\r\n    if (hitLifelinePoints.includes(true) && lifelinepoints.length > 0) {\r\n      console.log('lifeline increment')\r\n      incrementlifeline()\r\n    }\r\n\r\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\r\n    setLifelinePoints(\r\n      lifelinepoints\r\n        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))\r\n        .filter((enemy, idx) => !hitLifelinePoints[idx])\r\n    )\r\n\r\n    const hitMeteors = meteors\r\n      ? meteors.map(\r\n          (meteor) =>\r\n            meteors.filter((en) => distance(group.current.position, meteor) < 1)\r\n              .length > 0\r\n        )\r\n      : []\r\n\r\n    // console.log(hitPoints);\r\n\r\n    if (hitMeteors.includes(true) && meteors.length > 0) {\r\n      console.log('spaceship hit')\r\n      if (lifeline < 1) {\r\n        setReset()\r\n        console.log(lifeline)\r\n      } else {\r\n        decrementLifeline()\r\n      }\r\n    }\r\n\r\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\r\n    setMeteors(\r\n      meteors\r\n        .map((meteor) => ({ x: meteor.x, y: meteor.y, z: meteor.z }))\r\n        .filter((meteor, idx) => !hitMeteors[idx])\r\n    )\r\n  })\r\n\r\n  return (\r\n    <group ref={group} dispose={null}>\r\n      <mesh\r\n        material={fbx.children[0].material}\r\n        geometry={fbx.children[0].geometry}\r\n        scale={[0.1, 0.1, 0.1]}\r\n        rotation={[0, -Math.PI / 2, 0]}\r\n      >\r\n        <meshPhysicalMaterial\r\n          attach='material'\r\n          map={colorMap}\r\n          metalnessMap={metalnessMap}\r\n          roughnessMap={roughnessMap}\r\n          emissiveMap={emissiveMap}\r\n          metalness={0.5}\r\n          roughness={1}\r\n          emissiveIntensity={15}\r\n          emissive={0xffffff}\r\n          transparent\r\n          opacity={1}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Gameplay() {\r\n  const reset = useStore((state) => state.reset)\r\n  const nextlevel = useStore((state) => state.nextlevel)\r\n\r\n  const audio = new Audio(backgroundMusic)\r\n  audio.loop = true\r\n\r\n  useEffect(() => {\r\n    audio.play()\r\n    return () => {\r\n      audio.pause()\r\n    }\r\n  }, [audio])\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id='canvas'\r\n        style={{\r\n          width: '100vw',\r\n          height: '100vh',\r\n          position: 'position',\r\n          top: '0',\r\n          left: '0',\r\n          backgroundColor: 'black',\r\n        }}\r\n      >\r\n        <Canvas camera={{ fov: 85 }}>\r\n          <Stats />\r\n          <RecoilRoot>\r\n            {/* <CameraControls /> */}\r\n            <directionalLight\r\n              intensity={1}\r\n              color={0xffffff}\r\n              position={[0, 3, 2]}\r\n            />\r\n            <Physics\r\n              gravity={[0, -30, 0]}\r\n              defaultContactMaterial={{ restitution: 0 }}\r\n            >\r\n              <Suspense fallback={<Loader />}>\r\n                <Background />\r\n                <Meteor />\r\n                <MeteorController />\r\n                {/* <Meteors /> */}\r\n                {/* <SpaceShip /> */}\r\n                {/* <LowpolySpaceship /> */}\r\n                <FighterJet />\r\n                <Rings />\r\n                <LifelineRings />\r\n                <Planet />\r\n                <Lasers />\r\n                <BlackHole />\r\n                <LaserController />\r\n              </Suspense>\r\n            </Physics>\r\n            <GameTimer />\r\n          </RecoilRoot>\r\n          <Effects />\r\n        </Canvas>\r\n        <GameplayUI />\r\n        {reset && <Redirect to='/GameOverUI' />}\r\n        {nextlevel && <Redirect to='/PlanetInfo' />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Gameplay\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\GameplayUI.js",["230","231","232","233","234","235","236","237"],"import React, { useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport useStore from \"./store\";\r\n\r\n\r\nfunction GameplayUI() {\r\n\r\n    const lifeline = useStore((state) => state.lifeline);\r\n    const score = useStore((state) => state.score);\r\n\r\n    const secref = useRef()\r\n    const minref = useRef()\r\n\r\n    \r\n    let totalSeconds = 0\r\n    let timer = 0\r\n\r\n    const timerText = document.querySelector('.timer');\r\n\r\n    useEffect(() => {\r\n\r\n        // setInterval(setTime, 1000);\r\n\r\n        // function setTime() {\r\n        //   ++totalSeconds;\r\n        //   minref.current.innerHTML = pad(parseInt(totalSeconds / 60));\r\n        //   secref.current.innerHTML = pad(totalSeconds % 60)\r\n        // }\r\n    })\r\n\r\n \r\n\r\n  function pad(val) {\r\n    var valString = val + \" \";\r\n    if (valString.length < 2) {\r\n      return \"0\" + valString;\r\n    } else {\r\n      return valString;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"ui\">\r\n        <p style={{color: \"white\", fontSize: \"20px\", marginBottom: \"1px\", marginLeft: \"-12px\"}}>Score</p>\r\n        <div className=\"row\">\r\n          {/* <h1 ref={minref}></h1> */}\r\n          <h1>{score}</h1>  \r\n          {/* <h1 ref={secref}></h1> */}\r\n        </div>\r\n        {/* <div className=\"row\">\r\n                    <h1>Score : </h1>\r\n                    &nbsp;<h1>{score}</h1>\r\n                </div> */}\r\n      </div>\r\n      <div className=\"lifelineUI\">\r\n        <div className=\"row\">\r\n            <h1><span>Lifeline : </span> {lifeline}</h1>\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameplayUI;\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\MenuUI.js",["238","239"],"import React, { useEffect } from \"react\";\r\nimport { Canvas, useFrame } from \"react-three-fiber\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Background from \"./components/Background\";\r\nimport * as THREE from \"three\";\r\nimport AgencyFB from \"./assets/Agency FB_Regular.json\";\r\nimport backgroundMusic from './assets/music/BGM.ogg'\r\n\r\nfunction TextComponent() {\r\n  const font = new THREE.FontLoader().parse(AgencyFB);\r\n\r\n  // configure font geometry\r\n  const textOptions = {\r\n    font,\r\n    size: 0.9,\r\n    height: 0.1,\r\n  };\r\n\r\n  useFrame((state) => {\r\n\r\n    const {camera} = state\r\n\r\n    // camera.rotation.z = state.mouse.x * 3\r\n\r\n  });\r\n\r\n  return (\r\n    <mesh position={[-3.2, 0.5, 0]}>\r\n      <textBufferGeometry\r\n        attach=\"geometry\"\r\n        args={[\"Search Planet X\", textOptions]}\r\n      />\r\n      <meshNormalMaterial attach=\"material\" opacity={0.9}/>\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction MenuUI() {\r\n\r\n\r\n  const audio = new Audio(backgroundMusic)\r\n  audio.loop = true\r\n\r\n  useEffect(() => {\r\n    audio.play()\r\n    return () => {\r\n      audio.pause()\r\n    }\r\n  }, [audio])\r\n\r\n\r\n  return (\r\n    <section\r\n      style={{ width: \"100%\", height: \"100vh\", backgroundColor: \"black\" }}\r\n    >\r\n      <Canvas>\r\n        <Background />\r\n        <TextComponent/>\r\n      </Canvas>\r\n      <div className=\"menu-ui d-flex justify-content-center align-items-center mt-5\">\r\n        <div className=\"container text-center\">\r\n          {/* <h1>Search Planet X</h1> */}\r\n          <p>Discover the New World</p>\r\n          <div className=\"button\">\r\n            <Link exact to=\"/Gameplay\">\r\n              Find\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MenuUI;\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\GameOverUI.js",["240","241"],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport Background from \"./components/Background\";\r\nimport backgroundMusic from './assets/music/BGM.ogg'\r\nimport useStore from \"./store\";\r\n\r\nfunction GameOverUI() {\r\n\r\n    const resetFalse = useStore((state) => state.setResetFalse)\r\n    const resetScore =useStore((state) => state.resetScore)\r\n    const resetLifeline =useStore((state) => state.resetLifeline)\r\n  \r\n    useEffect(() => {\r\n      resetFalse()\r\n      resetScore()\r\n      resetLifeline()\r\n    },[])\r\n  \r\n\r\n    const audio = new Audio(backgroundMusic)\r\n    audio.loop = true\r\n  \r\n    useEffect(() => {\r\n      audio.play()\r\n      return () => {\r\n        audio.pause()\r\n      }\r\n    }, [audio])\r\n\r\n  return (\r\n    <div style={{width: \"100%\", height: \"100vh\", backgroundColor: \"black\"}}>\r\n      <Canvas>\r\n        <Background />\r\n      </Canvas>\r\n      <div className=\"gameoverui d-flex flex-column justify-content-center align-items-center\">\r\n        <div>\r\n          <h1>Game Over</h1>\r\n          <div className=\"button\">\r\n            <Link exact to=\"/Gameplay\">\r\n              Play Again\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOverUI;\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\PlanetInfo.js",["242","243"],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Canvas } from \"react-three-fiber\";\r\nimport Background from \"./components/Background\";\r\nimport useStore from \"./store\";\r\nimport uranus from \"./assets/uranus.jpg\";\r\nimport { Perf } from \"r3f-perf\";\r\n\r\nfunction PlanetInfo() {\r\n  const resetFalse = useStore((state) => state.setResetFalse);\r\n  const resetScore = useStore((state) => state.resetScore);\r\n  const resetLifeline = useStore((state) => state.resetLifeline);\r\n  const setNextLevelFalse = useStore((state) => state.setNextLevelFalse);\r\n\r\n  useEffect(() => {\r\n    resetFalse();\r\n    resetScore();\r\n    resetLifeline();\r\n    setNextLevelFalse();\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100vh\",\r\n        backgroundColor: \"black\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <Canvas>\r\n      \r\n        <Background />\r\n      </Canvas>\r\n      <div className=\"planetinfo d-flex flex-column justify-content-center align-items-center\">\r\n        <div>\r\n          <h1>Congratulations</h1>\r\n          <h2 className=\"text-center\" style={{ color: \"white\", opacity: 0.4 }}>\r\n            You found a new Planet\r\n          </h2>\r\n          <div className=\"button\">\r\n            <Link exact to=\"/Gameplay\">\r\n              Next Level\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"info\">\r\n        <div className=\"imageholder\">\r\n          <img src={uranus} alt=\"Uranus\" />\r\n        </div>\r\n        <h1 className=\"mr-5\">Uranus</h1>\r\n        <div className=\"row d-flex justify-content-start align-items-center ml-auto\">\r\n          <h3 className=\"mr-5 mt-3\">Diameter</h3>\r\n          <h2 className=\"mt-3\">50, 724 km</h2>\r\n        </div>\r\n        <div className=\"row d-flex justify-content-start align-items-center ml-auto\">\r\n          <h3 className=\"mr-5 mt-3\">Habitable</h3>\r\n          <h2 className=\"mt-3\">No</h2>\r\n        </div>\r\n        <div className=\"row d-flex justify-content-start align-items-center ml-auto\">\r\n          <h3 className=\"mt-3\">Atmosphere</h3>\r\n          <h2 className=\"ml-4 mt-3\">No</h2>\r\n        </div>\r\n        <div className=\"d-flex flex-column mt-3\">\r\n          <h3>Distance from Sun</h3>\r\n          <h1>2.871 billion km</h1>\r\n        </div>\r\n      </div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlanetInfo;\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\GameplayNext.js",["244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265"],"import { useRef, useState, useMemo, Suspense, useEffect } from \"react\";\r\nimport { Canvas, useFrame, useThree } from \"react-three-fiber\";\r\nimport { Html, OrbitControls, Stars, Stats, useProgress } from \"@react-three/drei\";\r\nimport {\r\n  ringPositionState,\r\n  smallringPositionState,\r\n  pointcheckerPositionState,\r\n  meteorPositionState,\r\n  scoreState,\r\n  shipPositionState,\r\n  laserPositionState,\r\n  whitemeteorPositionState,\r\n} from \"./gameState\";\r\nimport \"./App.css\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport * as THREE from \"three\";\r\nimport Planet from \"./Planet.js\";\r\nimport SpaceShip from \"./SpaceShip.js\";\r\nimport BlackMeteor from \"./Black_Meteor\";\r\nimport WhiteMeteor from \"./White_Meteor\";\r\n\r\nimport Rings from \"./components/Rings\";\r\nimport PointChecker from \"./components/PointChecker\";\r\nimport Background from \"./components/Background\";\r\nimport Effects from \"./components/Effects\";\r\nimport Meteor from \"./components/Meteor\";\r\nimport UI from \"./components/UI\";\r\nimport { Physics, useBox, useSphere, useTrimesh } from \"@react-three/cannon\";\r\nimport { Perf } from \"r3f-perf\";\r\nimport useStore from \"./store\";\r\nimport GameplayUI from \"./GameplayUI\";\r\nimport { Redirect } from \"react-router\";\r\nimport backgroundMusic from './assets/music/BGM.ogg'\r\nlet RING_SPEED = 0.5;\r\n\r\n// Game settings.\r\nconst LASER_RANGE = 100;\r\nconst LASER_Z_VELOCITY = 1;\r\nconst ENEMY_SPEED = 0.1;\r\nconst GROUND_HEIGHT = -50;\r\nlet METEOR_VELOCITY = -0.5;\r\n\r\nlet elapsedTime = 0;\r\n\r\n\r\n\r\n\r\n\r\nfunction InfiniteRings() {\r\n  let group = useRef();\r\n  let theta = 0;\r\n\r\n  let z = 180;\r\n\r\n  useFrame(() => {\r\n    // Some things maybe shouldn't be declarative, we're in the render-loop here with full access to the instance\r\n    group.current.position.z += 0.5;\r\n  });\r\n\r\n  const [geo, mat, coords] = useMemo(() => {\r\n    const geo = new THREE.TorusGeometry(2, 0.3, 16, 100, 6.3);\r\n    const mat = new THREE.MeshStandardMaterial({\r\n      color: new THREE.Color(\"hotpink\"),\r\n      emissiveIntensity: 1,\r\n      emissive: 0xf61379,\r\n      roughness: 1,\r\n      opacity: 1,\r\n      metalness: 1,\r\n    });\r\n    const coords = new Array(2500)\r\n      .fill()\r\n      .map((i) => [Math.random() * 12 - 8, 0, -180 - i * 60]);\r\n    return [geo, mat, coords];\r\n  }, []);\r\n  return (\r\n    <group ref={group}>\r\n      {coords.map(([p1, p2, p3], i) => (\r\n        <mesh\r\n          key={i}\r\n          visible={p3 > 20 ? false : true}\r\n          geometry={geo}\r\n          material={mat}\r\n          position={[p1, p2, p3]}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction distance(p1, p2) {\r\n  const a = p2.x - p1.x;\r\n  const b = p2.y - p1.y;\r\n  const c = p2.z - p1.z;\r\n\r\n  return Math.sqrt(a * a + b * b + c * c);\r\n}\r\n\r\n// This component runs game logic on each frame draw to update game state.\r\nfunction GameTimer() {\r\n  const [rings, setRings] = useRecoilState(ringPositionState);\r\n  const [smallrings, setsmallRings] = useRecoilState(smallringPositionState);\r\n  const [points, setPoints] = useRecoilState(pointcheckerPositionState);\r\n  const [meteor, setMeteor] = useRecoilState(meteorPositionState);\r\n  const [whitemeteor, setWhiteMeteor] = useRecoilState(\r\n    whitemeteorPositionState\r\n  );\r\n  const [lasers, setLaserPositions] = useRecoilState(laserPositionState);\r\n\r\n  useFrame(({ mouse, clock }) => {\r\n    RING_SPEED += 0.00005;\r\n\r\n    elapsedTime = clock.elapsedTime\r\n\r\n    const hitEnemies = meteor\r\n      ? meteor.map(\r\n          (enemy) =>\r\n            lasers.filter(\r\n              () =>\r\n                lasers.filter((laser) => distance(laser, enemy) < 1).length > 0\r\n            ).length > 0\r\n        )\r\n      : [];\r\n\r\n    if (hitEnemies.includes(true) && meteor.length > 0) {\r\n      console.log(\"hit detected\");\r\n    }\r\n\r\n    setRings(\r\n      rings.map((ring) => ({ x: ring.x, y: ring.y, z: ring.z + RING_SPEED }))\r\n    );\r\n\r\n    setPoints(\r\n      points.map((point) => ({\r\n        x: point.x,\r\n        y: point.y,\r\n        z: point.z + RING_SPEED,\r\n      }))\r\n    );\r\n\r\n    setMeteor(\r\n      meteor\r\n        .map((meteor) => ({ x: meteor.x, y: meteor.y, z: meteor.z + 0.8 }))\r\n        .filter((enemy, idx) => !hitEnemies[idx])\r\n    );\r\n\r\n    // Move the Lasers and remove lasers at end of range or that have hit the ground.\r\n    setLaserPositions(\r\n      lasers\r\n        .map((laser) => ({\r\n          id: laser.id,\r\n          x: laser.x + laser.velocity[0],\r\n          y: laser.y + laser.velocity[1],\r\n          z: laser.z - LASER_Z_VELOCITY,\r\n          velocity: laser.velocity,\r\n        }))\r\n        .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\r\n    );\r\n\r\n    setWhiteMeteor(\r\n      whitemeteor\r\n        .map((met) => ({\r\n          id: met.id,\r\n          x: met.x * Math.random() * 4,\r\n          y: met.y * Math.random() * 2,\r\n          z: met.z - METEOR_VELOCITY,\r\n        }))\r\n        .filter((met) => met.z > 20)\r\n    );\r\n  });\r\n\r\n  return null;\r\n}\r\n\r\n\r\n\r\nconst CameraControls = () => {\r\n  // Get a reference to the Three.js Camera, and the canvas html element.\r\n  // We need these to setup the OrbitControls component.\r\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\r\n  const {\r\n    camera,\r\n    gl: { domElement },\r\n  } = useThree();\r\n  // Ref to the controls, so that we can update them on every frame using useFrame\r\n  const controls = useRef();\r\n  useFrame((state) => controls.current.update());\r\n  return (\r\n    <OrbitControls\r\n      ref={controls}\r\n      enableZoom={true}\r\n      enableRotate={true}\r\n      args={[camera, domElement]}\r\n    />\r\n  );\r\n};\r\n\r\n\r\n\r\nfunction Loader() {\r\n  const { progress } = useProgress();\r\n  return (\r\n    <Html center style={{ color: \"white\", fontSize: \"20px\" }}>\r\n      {parseInt(progress)} % loaded\r\n    </Html>\r\n  );\r\n}\r\n\r\n// An invisible clickable element in the front of the scene.\r\n// Manages creating lasers with the correct initial velocity on click.\r\nfunction LaserController() {\r\n  const shipPosition = useRecoilValue(shipPositionState);\r\n  const [lasers, setLasers] = useRecoilState(laserPositionState);\r\n  return (\r\n    <mesh\r\n      position={[0, 0, 0]}\r\n      onClick={() =>\r\n        setLasers([\r\n          ...lasers,\r\n          {\r\n            id: Math.random(), // This needs to be unique.. Random isn't perfect but it works. Could use a uuid here.\r\n            x: 0,\r\n            y: 0,\r\n            z: 0,\r\n            velocity: [\r\n              shipPosition.rotation.x * 1,\r\n              shipPosition.rotation.y * 2,\r\n            ],\r\n          },\r\n        ])\r\n      }\r\n    >\r\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color=\"orange\"\r\n        opacity={0.2}\r\n        transparent\r\n        visible={false}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction MeteorController() {\r\n  const [meteor, setMeteor] = useRecoilState(whitemeteorPositionState);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setMeteor([\r\n        ...meteor,\r\n        {\r\n          id: Math.random(), // This needs to be unique.. Random isn't perfect but it works. Could use a uuid here.\r\n          x: 0,\r\n          y: 0,\r\n          z: 0,\r\n        },\r\n      ]);\r\n    }, 500);\r\n  }, []);\r\n\r\n  useFrame(({ clock }) => {\r\n    setMeteor([\r\n      ...meteor,\r\n      {\r\n        id: Math.random(), // This needs to be unique.. Random isn't perfect but it works. Could use a uuid here.\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n      },\r\n    ]);\r\n  });\r\n\r\n  return (\r\n    <mesh position={[0, 0, -350]}>\r\n      <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color=\"orange\"\r\n        opacity={0.2}\r\n        transparent\r\n        visible={false}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\nfunction Meteors() {\r\n  const meteors = useRecoilValue(whitemeteorPositionState);\r\n  return (\r\n    <group>\r\n      {meteors.map((laser) => (\r\n        <mesh\r\n          position={[laser.x, laser.y, laser.z]}\r\n          key={`${laser.id}`}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n        >\r\n          <sphereBufferGeometry attach=\"geometry\" args={[1, 12, 12]} />\r\n          <meshStandardMaterial\r\n            attach=\"material\"\r\n            emissive=\"yellow\"\r\n            emissiveIntensity={1}\r\n            color={\"white\"}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\n// Draws all of the lasers existing in state.\r\nfunction Lasers() {\r\n  const lasers = useRecoilValue(laserPositionState);\r\n  return (\r\n    <group>\r\n      {lasers.map((laser) => (\r\n        <mesh\r\n          position={[laser.x, laser.y, laser.z]}\r\n          key={`${laser.id}`}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n        >\r\n          <cylinderBufferGeometry attach=\"geometry\" args={[0.1, 0.03, 2, 32]} />\r\n          <meshStandardMaterial\r\n            attach=\"material\"\r\n            emissive=\"yellow\"\r\n            emissiveIntensity={1}\r\n            color={\"white\"}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction GameplayNext() {\r\n\r\n  const reset =useStore((state) => state.reset)\r\n  const nextlevel = useStore((state) => state.nextlevel)\r\n\r\n  const audio = new Audio(backgroundMusic)\r\n  audio.loop = true\r\n\r\n  useEffect(() => {\r\n    audio.play()\r\n    return () => {\r\n      audio.pause()\r\n    }\r\n  }, [audio])\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        id=\"canvas\"\r\n        style={{\r\n          width: \"100vw\",\r\n          height: \"100vh\",\r\n          position: \"position\",\r\n          top: \"0\",\r\n          left: \"0\",\r\n          backgroundColor: \"black\",\r\n        }}\r\n      >\r\n        <Canvas camera={{ fov: 75 }}>\r\n          <Stats/>\r\n          <RecoilRoot>\r\n            {/* <CameraControls /> */}\r\n            <directionalLight\r\n              intensity={1}\r\n              color={0xffffff}\r\n              position={[0, 3, 2]}\r\n            />\r\n            <Suspense fallback={<Loader />}>\r\n              <Background />\r\n              <Planet />\r\n              {/* <PointChecker /> */}\r\n              <Physics\r\n                gravity={[0, -30, 0]}\r\n                defaultContactMaterial={{ restitution: 0 }}\r\n              >\r\n                <Meteor />\r\n                <MeteorController />\r\n                <Meteors />\r\n                <SpaceShip />\r\n                <Rings />\r\n                {/* <Cube /> */}\r\n              </Physics>\r\n              <Lasers />\r\n              <LaserController />\r\n            </Suspense>\r\n            <GameTimer />\r\n          </RecoilRoot>\r\n          <Effects />\r\n        </Canvas>\r\n        <GameplayUI/>\r\n        {reset && <Redirect to=\"/GameOverUI\" />}\r\n        {/* {nextlevel && <Redirect to=\"/PlanetInfo\" />} */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameplayNext;\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\New_Spaceship.js",["266","267","268","269","270"],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\Model.js",["271","272","273","274","275"],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\BlackHole.js",[],["276","277"],"D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\components\\LifelineRings.js",["278","279","280","281","282","283","284","285","286","287"],"import React, { useRef, useMemo, useEffect } from \"react\";\r\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport { lifelinePositionState } from \"../gameState\";\r\nimport * as THREE from \"three\";\r\nimport { useFrame } from \"react-three-fiber\";\r\nimport Effects from \"./Effects\";\r\nimport {\r\n  MeshDistortMaterial,\r\n  MeshWobbleMaterial,\r\n  PositionalAudio,\r\n} from \"@react-three/drei\";\r\nimport life from \"../assets/music/Life.ogg\";\r\nimport useStore from '../store'\r\n\r\nfunction LifelineRings() {\r\n    const rings = useRecoilValue(lifelinePositionState);\r\n    const ring = useRef();\r\n    \r\n    const lifeline = useStore((state) => state.lifeline);\r\n\r\n    const reset = useResetRecoilState(lifelinePositionState);\r\n  \r\n    const [geo, mat] = useMemo(() => {\r\n      const geo = new THREE.TorusBufferGeometry(2, 0.3, 16, 100, 6.3);\r\n      const mat = new THREE.MeshStandardMaterial({\r\n        color: new THREE.Color(0xffff00),\r\n        emissiveIntensity: 1,\r\n        emissive: 0xFFE333,\r\n        roughness: 1,\r\n        opacity: 0,\r\n      });\r\n  \r\n      return [geo, mat];\r\n    }, []);\r\n  \r\n    useFrame((state) => {\r\n      var clock = state.clock;\r\n      var time = 0;\r\n      var delta = 0;\r\n      var direction = new THREE.Vector3(0, 0, 1);\r\n      var speed = 100; // units a second - 2 seconds\r\n  \r\n      delta = clock.getDelta();\r\n      time += delta;\r\n  \r\n      // rings.forEach((enemy, i) => {\r\n      //   if (enemy.z >= 860) {\r\n      //     reset();\r\n      //     ring.current.position.addScaledVector(direction, speed * delta);\r\n      //     console.log(speed);\r\n      //   } else {\r\n      //   }\r\n      // });\r\n    });\r\n  \r\n    return (\r\n      <group>\r\n        {rings.map((enemy, i) => (\r\n          <mesh\r\n            ref={ring}\r\n            visible={lifeline < 3  ? true : false}\r\n            position={[enemy.x, enemy.y, enemy.z]}\r\n            key={i}\r\n            geometry={geo}\r\n            material={mat}\r\n            material-transparent\r\n            material-opacity={1}\r\n          ></mesh>\r\n        ))}\r\n  \r\n        {rings.map((enemy, i) => (\r\n          <pointLight\r\n            key={i}\r\n            visible={lifeline < 3  ? true : false}\r\n            intensity={enemy.z > 0 ? 0 : 0.1}\r\n            color={0xFFE333}\r\n            position={[enemy.x, enemy.y, enemy.z]}\r\n          />\r\n        ))}\r\n        \r\n      </group>\r\n    );\r\n}\r\n\r\nexport default LifelineRings\r\n","D:\\Development\\Stuvio Projects\\Websites\\ring_dodger\\src\\LowpolySpaceship.js",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310"],"/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useState } from \"react\";\nimport { PositionalAudio, useGLTF } from \"@react-three/drei\";\nimport { useFrame, useLoader } from \"react-three-fiber\";\nimport { useSpring, a } from \"react-spring/three\";\nimport {\n  shipPositionState,\n  enemyPositionState,\n  pointcheckerPositionState,\n  scoreState,\n  ringPositionState,\n  meteorPositionState,\n  lifelinepointPositionState,\n} from \"./gameState\";\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from \"recoil\";\nimport { useBox, usePlane, useSphere } from \"@react-three/cannon\";\nimport useStore from \"./store\";\nimport { Redirect, Route, Router, Switch } from \"react-router\";\nimport { createBrowserHistory } from \"history\";\nimport GameOverUI from \"./GameOverUI\";\nimport * as THREE from \"three\";\n\n// Calculate the distance between two points in 3d space.\n// Used to detect lasers intersecting with points.\nfunction distance(p1, p2) {\n  const a = p2.x - p1.x;\n  const b = p2.y - p1.y;\n  const c = p2.z - p1.z;\n\n  return Math.sqrt(a * a + b * b + c * c);\n}\n\nexport default function Model(props) {\n  const group = useRef();\n  const { nodes, materials } = useGLTF(\n    \"/Space Explorer/Low_Poly_Spaceship/low_poly_spaceship.glb\"\n  );\n\n  const colorMap = useLoader(\n    THREE.TextureLoader,\n    \"/Space Explorer/Low_Poly_Spaceship/spaceshipbody_col.jpg\"\n  );\n  const metalnessMap = useLoader(\n    THREE.TextureLoader,\n    \"/Space Explorer/Low_Poly_Spaceship/spaceship_metal.jpg\"\n  );\n  const roughnessMap = useLoader(\n    THREE.TextureLoader,\n    \"/Space Explorer/Low_Poly_Spaceship/spaceship_rough.jpg\"\n  );\n  const emissiveMap = useLoader(\n    THREE.TextureLoader,\n    \"/Space Explorer/Low_Poly_Spaceship/spaceship_Emm.png\"\n  );\n\n  const newScore = useStore((state) => state.score);\n\n  const incrementScore = useStore((state) => state.incrementScore);\n  const incrementlifeline = useStore((state) => state.incrementtLifeline);\n\n  const [shipPosition, setshipPosition] = useRecoilState(shipPositionState);\n  const [points, setPoints] = useRecoilState(pointcheckerPositionState);\n  const [meteors, setMeteors] = useRecoilState(meteorPositionState);\n  const [rings, setRings] = useRecoilState(ringPositionState);\n  const [score, setScore] = useRecoilState(scoreState);\n  const [lifelinepoints, setLifelinePoints] = useRecoilState(\n    lifelinepointPositionState\n  );\n\n  const decrementLifeline = useStore((state) => state.decrementLifeline);\n  const lifeline = useStore((state) => state.lifeline);\n  const reset = useStore((state) => state.reset);\n  const setReset = useStore((state) => state.setResetTrue);\n\n  const [expand, setExpand] = useState(true);\n\n  // const [ref, api] = useBox(() => ({\n  //   mass: 0,\n  //   args: [1,1,1],\n  // }));\n\n  const p = useSpring({\n    scale: expand ? [0.8, 1.57, 0.35] : [0.4, 1.2, 0.15],\n  });\n\n  useFrame(({ mouse }) => {\n    setshipPosition({\n      position: { x: mouse.x * 5, y: mouse.y * 2 },\n      rotation: { z: mouse.x * 0.5, x: -mouse.x * 0.5, y: -mouse.y * 0.2 },\n    });\n  });\n  // Update the ships position from the updated state.\n  useFrame((state) => {\n    group.current.rotation.z = shipPosition.rotation.z;\n    group.current.rotation.y = shipPosition.rotation.x;\n    group.current.rotation.x = shipPosition.rotation.y;\n    group.current.position.y = shipPosition.position.y;\n    group.current.position.x = shipPosition.position.x;\n\n    const { camera } = state;\n\n    const hitPoints = points\n      ? points.map(\n          (point) =>\n            points.filter((en) => distance(group.current.position, point) < 3)\n              .length > 0\n        )\n      : [];\n\n    // console.log(hitPoints);\n\n    if (hitPoints.includes(true) && points.length > 0) {\n      // setScore(score + 10);\n      incrementScore();\n    }\n\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\n    setPoints(\n      points\n        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))\n        .filter((enemy, idx) => !hitPoints[idx])\n    );\n\n    const hitLifelinePoints = lifelinepoints\n      ? lifelinepoints.map(\n          (point) =>\n            lifelinepoints.filter(\n              (en) => distance(group.current.position, point) < 3\n            ).length > 0\n        )\n      : [];\n\n    // console.log(hitLifelinePoints);\n\n    if (hitLifelinePoints.includes(true) && lifelinepoints.length > 0) {\n      console.log(\"lifeline increment\");\n      incrementlifeline();\n    }\n\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\n    setLifelinePoints(\n      lifelinepoints\n        .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))\n        .filter((enemy, idx) => !hitLifelinePoints[idx])\n    );\n\n    const hitMeteors = meteors\n      ? meteors.map(\n          (meteor) =>\n            meteors.filter((en) => distance(group.current.position, meteor) < 1)\n              .length > 0\n        )\n      : [];\n\n    // console.log(hitPoints);\n\n    if (hitMeteors.includes(true) && meteors.length > 0) {\n      console.log(\"spaceship hit\");\n      if (lifeline < 1) {\n        setReset();\n        console.log(lifeline);\n      } else {\n        decrementLifeline();\n      }\n    }\n\n    // Move all of the points. Remove points that have been destroyed, or passed the player.\n    setMeteors(\n      meteors\n        .map((meteor) => ({ x: meteor.x, y: meteor.y, z: meteor.z }))\n        .filter((meteor, idx) => !hitMeteors[idx])\n    );\n  });\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        material={materials.blinn1}\n        geometry={nodes.Spaceship_geo.geometry}\n        rotation={[Math.PI / 2, 0, Math.PI / 2]}\n        scale={[0.1, 0.1, 0.1]}\n      >\n        <meshPhysicalMaterial\n          attach=\"material\"\n          map={colorMap}\n          metalnessMap={metalnessMap}\n          roughnessMap={roughnessMap}\n          emissiveMap={emissiveMap}\n          metalness={0.5}\n          roughness={1}\n          emissiveIntensity={1}\n          emissive={0xffffff}\n          transparent\n          opacity={1}\n          map-flipY={false}\n        />\n      </mesh>\n    </group>\n  );\n}\n\nuseGLTF.preload(\"/Space Explorer/Low_Poly_Spaceship/low_poly_spaceship.glb\");\n",{"ruleId":"311","replacedBy":"312"},{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","severity":1,"message":"316","line":2,"column":35,"nodeType":"317","messageId":"318","endLine":2,"endColumn":43},{"ruleId":"315","severity":1,"message":"319","line":8,"column":8,"nodeType":"317","messageId":"318","endLine":8,"endColumn":16},{"ruleId":"315","severity":1,"message":"320","line":9,"column":17,"nodeType":"317","messageId":"318","endLine":9,"endColumn":32},{"ruleId":"315","severity":1,"message":"321","line":10,"column":10,"nodeType":"317","messageId":"318","endLine":10,"endColumn":25},{"ruleId":"315","severity":1,"message":"322","line":15,"column":3,"nodeType":"317","messageId":"318","endLine":15,"endColumn":21},{"ruleId":"315","severity":1,"message":"323","line":22,"column":26,"nodeType":"317","messageId":"318","endLine":22,"endColumn":40},{"ruleId":"315","severity":1,"message":"324","line":22,"column":42,"nodeType":"317","messageId":"318","endLine":22,"endColumn":61},{"ruleId":"315","severity":1,"message":"325","line":23,"column":10,"nodeType":"317","messageId":"318","endLine":23,"endColumn":16},{"ruleId":"315","severity":1,"message":"326","line":23,"column":18,"nodeType":"317","messageId":"318","endLine":23,"endColumn":26},{"ruleId":"315","severity":1,"message":"327","line":23,"column":28,"nodeType":"317","messageId":"318","endLine":23,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":25,"column":10,"nodeType":"317","messageId":"318","endLine":25,"endColumn":18},{"ruleId":"315","severity":1,"message":"328","line":25,"column":20,"nodeType":"317","messageId":"318","endLine":25,"endColumn":25},{"ruleId":"315","severity":1,"message":"329","line":25,"column":27,"nodeType":"317","messageId":"318","endLine":25,"endColumn":33},{"ruleId":"315","severity":1,"message":"330","line":25,"column":35,"nodeType":"317","messageId":"318","endLine":25,"endColumn":41},{"ruleId":"315","severity":1,"message":"331","line":27,"column":8,"nodeType":"317","messageId":"318","endLine":27,"endColumn":18},{"ruleId":"315","severity":1,"message":"332","line":30,"column":7,"nodeType":"317","messageId":"318","endLine":30,"endColumn":14},{"ruleId":"315","severity":1,"message":"333","line":49,"column":9,"nodeType":"317","messageId":"318","endLine":49,"endColumn":17},{"ruleId":"315","severity":1,"message":"334","line":57,"column":10,"nodeType":"317","messageId":"318","endLine":57,"endColumn":15},{"ruleId":"315","severity":1,"message":"335","line":57,"column":17,"nodeType":"317","messageId":"318","endLine":57,"endColumn":25},{"ruleId":"315","severity":1,"message":"336","line":58,"column":10,"nodeType":"317","messageId":"318","endLine":58,"endColumn":15},{"ruleId":"315","severity":1,"message":"337","line":58,"column":17,"nodeType":"317","messageId":"318","endLine":58,"endColumn":25},{"ruleId":"315","severity":1,"message":"338","line":63,"column":9,"nodeType":"317","messageId":"318","endLine":63,"endColumn":14},{"ruleId":"315","severity":1,"message":"339","line":67,"column":18,"nodeType":"317","messageId":"318","endLine":67,"endColumn":27},{"ruleId":"315","severity":1,"message":"340","line":75,"column":9,"nodeType":"317","messageId":"318","endLine":75,"endColumn":10},{"ruleId":"315","severity":1,"message":"341","line":93,"column":12,"nodeType":"317","messageId":"318","endLine":93,"endColumn":18},{"ruleId":"315","severity":1,"message":"316","line":13,"column":10,"nodeType":"317","messageId":"318","endLine":13,"endColumn":18},{"ruleId":"315","severity":1,"message":"342","line":20,"column":9,"nodeType":"317","messageId":"318","endLine":20,"endColumn":18},{"ruleId":"315","severity":1,"message":"343","line":1,"column":34,"nodeType":"317","messageId":"318","endLine":1,"endColumn":43},{"ruleId":"315","severity":1,"message":"344","line":3,"column":29,"nodeType":"317","messageId":"318","endLine":3,"endColumn":54},{"ruleId":"315","severity":1,"message":"345","line":6,"column":8,"nodeType":"317","messageId":"318","endLine":6,"endColumn":15},{"ruleId":"315","severity":1,"message":"346","line":8,"column":3,"nodeType":"317","messageId":"318","endLine":8,"endColumn":22},{"ruleId":"315","severity":1,"message":"347","line":9,"column":3,"nodeType":"317","messageId":"318","endLine":9,"endColumn":21},{"ruleId":"315","severity":1,"message":"321","line":10,"column":3,"nodeType":"317","messageId":"318","endLine":10,"endColumn":18},{"ruleId":"315","severity":1,"message":"348","line":12,"column":8,"nodeType":"317","messageId":"318","endLine":12,"endColumn":12},{"ruleId":"315","severity":1,"message":"349","line":13,"column":10,"nodeType":"317","messageId":"318","endLine":13,"endColumn":20},{"ruleId":"315","severity":1,"message":"350","line":18,"column":9,"nodeType":"317","messageId":"318","endLine":18,"endColumn":15},{"ruleId":"315","severity":1,"message":"351","line":19,"column":9,"nodeType":"317","messageId":"318","endLine":19,"endColumn":14},{"ruleId":"315","severity":1,"message":"352","line":20,"column":9,"nodeType":"317","messageId":"318","endLine":20,"endColumn":16},{"ruleId":"315","severity":1,"message":"338","line":22,"column":9,"nodeType":"317","messageId":"318","endLine":22,"endColumn":14},{"ruleId":"315","severity":1,"message":"353","line":24,"column":10,"nodeType":"317","messageId":"318","endLine":24,"endColumn":16},{"ruleId":"315","severity":1,"message":"354","line":24,"column":18,"nodeType":"317","messageId":"318","endLine":24,"endColumn":24},{"ruleId":"315","severity":1,"message":"355","line":54,"column":9,"nodeType":"317","messageId":"318","endLine":54,"endColumn":18},{"ruleId":"315","severity":1,"message":"356","line":55,"column":9,"nodeType":"317","messageId":"318","endLine":55,"endColumn":14},{"ruleId":"315","severity":1,"message":"357","line":58,"column":5,"nodeType":"317","messageId":"318","endLine":58,"endColumn":9},{"ruleId":"315","severity":1,"message":"345","line":6,"column":8,"nodeType":"317","messageId":"318","endLine":6,"endColumn":15},{"ruleId":"315","severity":1,"message":"338","line":12,"column":11,"nodeType":"317","messageId":"318","endLine":12,"endColumn":16},{"ruleId":"315","severity":1,"message":"355","line":28,"column":11,"nodeType":"317","messageId":"318","endLine":28,"endColumn":20},{"ruleId":"315","severity":1,"message":"357","line":32,"column":7,"nodeType":"317","messageId":"318","endLine":32,"endColumn":11},{"ruleId":"315","severity":1,"message":"356","line":33,"column":7,"nodeType":"317","messageId":"318","endLine":33,"endColumn":12},{"ruleId":"315","severity":1,"message":"358","line":4,"column":10,"nodeType":"317","messageId":"318","endLine":4,"endColumn":26},{"ruleId":"315","severity":1,"message":"359","line":19,"column":9,"nodeType":"317","messageId":"318","endLine":19,"endColumn":16},{"ruleId":"315","severity":1,"message":"360","line":4,"column":3,"nodeType":"317","messageId":"318","endLine":4,"endColumn":20},{"ruleId":"315","severity":1,"message":"344","line":5,"column":3,"nodeType":"317","messageId":"318","endLine":5,"endColumn":28},{"ruleId":"315","severity":1,"message":"361","line":19,"column":15,"nodeType":"317","messageId":"318","endLine":19,"endColumn":18},{"ruleId":"315","severity":1,"message":"362","line":31,"column":15,"nodeType":"317","messageId":"318","endLine":31,"endColumn":18},{"ruleId":"315","severity":1,"message":"357","line":49,"column":5,"nodeType":"317","messageId":"318","endLine":49,"endColumn":9},{"ruleId":"315","severity":1,"message":"363","line":1,"column":17,"nodeType":"317","messageId":"318","endLine":1,"endColumn":23},{"ruleId":"315","severity":1,"message":"323","line":2,"column":10,"nodeType":"317","messageId":"318","endLine":2,"endColumn":24},{"ruleId":"315","severity":1,"message":"324","line":2,"column":26,"nodeType":"317","messageId":"318","endLine":2,"endColumn":45},{"ruleId":"315","severity":1,"message":"364","line":3,"column":10,"nodeType":"317","messageId":"318","endLine":3,"endColumn":29},{"ruleId":"315","severity":1,"message":"361","line":14,"column":17,"nodeType":"317","messageId":"318","endLine":14,"endColumn":20},{"ruleId":"315","severity":1,"message":"355","line":35,"column":11,"nodeType":"317","messageId":"318","endLine":35,"endColumn":20},{"ruleId":"315","severity":1,"message":"356","line":36,"column":11,"nodeType":"317","messageId":"318","endLine":36,"endColumn":16},{"ruleId":"315","severity":1,"message":"357","line":39,"column":7,"nodeType":"317","messageId":"318","endLine":39,"endColumn":11},{"ruleId":"315","severity":1,"message":"365","line":6,"column":3,"nodeType":"317","messageId":"318","endLine":6,"endColumn":8},{"ruleId":"315","severity":1,"message":"366","line":29,"column":8,"nodeType":"317","messageId":"318","endLine":29,"endColumn":17},{"ruleId":"315","severity":1,"message":"367","line":30,"column":8,"nodeType":"317","messageId":"318","endLine":30,"endColumn":24},{"ruleId":"315","severity":1,"message":"368","line":31,"column":8,"nodeType":"317","messageId":"318","endLine":31,"endColumn":19},{"ruleId":"315","severity":1,"message":"369","line":32,"column":8,"nodeType":"317","messageId":"318","endLine":32,"endColumn":19},{"ruleId":"315","severity":1,"message":"370","line":35,"column":8,"nodeType":"317","messageId":"318","endLine":35,"endColumn":20},{"ruleId":"315","severity":1,"message":"371","line":39,"column":8,"nodeType":"317","messageId":"318","endLine":39,"endColumn":10},{"ruleId":"315","severity":1,"message":"325","line":40,"column":19,"nodeType":"317","messageId":"318","endLine":40,"endColumn":25},{"ruleId":"315","severity":1,"message":"327","line":40,"column":27,"nodeType":"317","messageId":"318","endLine":40,"endColumn":36},{"ruleId":"315","severity":1,"message":"349","line":40,"column":38,"nodeType":"317","messageId":"318","endLine":40,"endColumn":48},{"ruleId":"315","severity":1,"message":"372","line":41,"column":10,"nodeType":"317","messageId":"318","endLine":41,"endColumn":14},{"ruleId":"315","severity":1,"message":"373","line":56,"column":7,"nodeType":"317","messageId":"318","endLine":56,"endColumn":18},{"ruleId":"315","severity":1,"message":"374","line":62,"column":10,"nodeType":"317","messageId":"318","endLine":62,"endColumn":23},{"ruleId":"315","severity":1,"message":"375","line":64,"column":7,"nodeType":"317","messageId":"318","endLine":64,"endColumn":12},{"ruleId":"315","severity":1,"message":"376","line":66,"column":7,"nodeType":"317","messageId":"318","endLine":66,"endColumn":8},{"ruleId":"315","severity":1,"message":"377","line":115,"column":10,"nodeType":"317","messageId":"318","endLine":115,"endColumn":20},{"ruleId":"315","severity":1,"message":"378","line":115,"column":22,"nodeType":"317","messageId":"318","endLine":115,"endColumn":35},{"ruleId":"315","severity":1,"message":"379","line":128,"column":5,"nodeType":"317","messageId":"318","endLine":128,"endColumn":16},{"ruleId":"315","severity":1,"message":"380","line":211,"column":7,"nodeType":"317","messageId":"318","endLine":211,"endColumn":21},{"ruleId":"381","severity":1,"message":"382","line":292,"column":6,"nodeType":"383","endLine":292,"endColumn":8,"suggestions":"384"},{"ruleId":"315","severity":1,"message":"385","line":320,"column":10,"nodeType":"317","messageId":"318","endLine":320,"endColumn":17},{"ruleId":"315","severity":1,"message":"333","line":389,"column":9,"nodeType":"317","messageId":"318","endLine":389,"endColumn":17},{"ruleId":"315","severity":1,"message":"334","line":397,"column":10,"nodeType":"317","messageId":"318","endLine":397,"endColumn":15},{"ruleId":"315","severity":1,"message":"335","line":397,"column":17,"nodeType":"317","messageId":"318","endLine":397,"endColumn":25},{"ruleId":"315","severity":1,"message":"336","line":398,"column":10,"nodeType":"317","messageId":"318","endLine":398,"endColumn":15},{"ruleId":"315","severity":1,"message":"337","line":398,"column":17,"nodeType":"317","messageId":"318","endLine":398,"endColumn":25},{"ruleId":"315","severity":1,"message":"338","line":405,"column":9,"nodeType":"317","messageId":"318","endLine":405,"endColumn":14},{"ruleId":"315","severity":1,"message":"339","line":408,"column":18,"nodeType":"317","messageId":"318","endLine":408,"endColumn":27},{"ruleId":"315","severity":1,"message":"340","line":415,"column":9,"nodeType":"317","messageId":"318","endLine":415,"endColumn":10},{"ruleId":"315","severity":1,"message":"341","line":433,"column":13,"nodeType":"317","messageId":"318","endLine":433,"endColumn":19},{"ruleId":"381","severity":1,"message":"386","line":538,"column":9,"nodeType":"387","endLine":538,"endColumn":43},{"ruleId":"315","severity":1,"message":"388","line":2,"column":10,"nodeType":"317","messageId":"318","endLine":2,"endColumn":14},{"ruleId":"315","severity":1,"message":"389","line":3,"column":10,"nodeType":"317","messageId":"318","endLine":3,"endColumn":18},{"ruleId":"315","severity":1,"message":"390","line":12,"column":11,"nodeType":"317","messageId":"318","endLine":12,"endColumn":17},{"ruleId":"315","severity":1,"message":"391","line":13,"column":11,"nodeType":"317","messageId":"318","endLine":13,"endColumn":17},{"ruleId":"315","severity":1,"message":"392","line":16,"column":9,"nodeType":"317","messageId":"318","endLine":16,"endColumn":21},{"ruleId":"315","severity":1,"message":"393","line":17,"column":9,"nodeType":"317","messageId":"318","endLine":17,"endColumn":14},{"ruleId":"315","severity":1,"message":"394","line":19,"column":11,"nodeType":"317","messageId":"318","endLine":19,"endColumn":20},{"ruleId":"315","severity":1,"message":"395","line":34,"column":12,"nodeType":"317","messageId":"318","endLine":34,"endColumn":15},{"ruleId":"315","severity":1,"message":"341","line":21,"column":12,"nodeType":"317","messageId":"318","endLine":21,"endColumn":18},{"ruleId":"381","severity":1,"message":"396","line":41,"column":9,"nodeType":"387","endLine":41,"endColumn":43},{"ruleId":"381","severity":1,"message":"397","line":18,"column":7,"nodeType":"383","endLine":18,"endColumn":9,"suggestions":"398"},{"ruleId":"381","severity":1,"message":"399","line":21,"column":11,"nodeType":"387","endLine":21,"endColumn":45},{"ruleId":"315","severity":1,"message":"372","line":7,"column":10,"nodeType":"317","messageId":"318","endLine":7,"endColumn":14},{"ruleId":"381","severity":1,"message":"400","line":20,"column":6,"nodeType":"383","endLine":20,"endColumn":8,"suggestions":"401"},{"ruleId":"315","severity":1,"message":"402","line":1,"column":18,"nodeType":"317","messageId":"318","endLine":1,"endColumn":26},{"ruleId":"315","severity":1,"message":"365","line":3,"column":31,"nodeType":"317","messageId":"318","endLine":3,"endColumn":36},{"ruleId":"315","severity":1,"message":"403","line":9,"column":3,"nodeType":"317","messageId":"318","endLine":9,"endColumn":13},{"ruleId":"315","severity":1,"message":"368","line":20,"column":8,"nodeType":"317","messageId":"318","endLine":20,"endColumn":19},{"ruleId":"315","severity":1,"message":"369","line":21,"column":8,"nodeType":"317","messageId":"318","endLine":21,"endColumn":19},{"ruleId":"315","severity":1,"message":"370","line":24,"column":8,"nodeType":"317","messageId":"318","endLine":24,"endColumn":20},{"ruleId":"315","severity":1,"message":"371","line":28,"column":8,"nodeType":"317","messageId":"318","endLine":28,"endColumn":10},{"ruleId":"315","severity":1,"message":"325","line":29,"column":19,"nodeType":"317","messageId":"318","endLine":29,"endColumn":25},{"ruleId":"315","severity":1,"message":"327","line":29,"column":27,"nodeType":"317","messageId":"318","endLine":29,"endColumn":36},{"ruleId":"315","severity":1,"message":"349","line":29,"column":38,"nodeType":"317","messageId":"318","endLine":29,"endColumn":48},{"ruleId":"315","severity":1,"message":"372","line":30,"column":10,"nodeType":"317","messageId":"318","endLine":30,"endColumn":14},{"ruleId":"315","severity":1,"message":"373","line":40,"column":7,"nodeType":"317","messageId":"318","endLine":40,"endColumn":18},{"ruleId":"315","severity":1,"message":"374","line":50,"column":10,"nodeType":"317","messageId":"318","endLine":50,"endColumn":23},{"ruleId":"315","severity":1,"message":"375","line":52,"column":7,"nodeType":"317","messageId":"318","endLine":52,"endColumn":12},{"ruleId":"315","severity":1,"message":"376","line":54,"column":7,"nodeType":"317","messageId":"318","endLine":54,"endColumn":8},{"ruleId":"315","severity":1,"message":"377","line":102,"column":10,"nodeType":"317","messageId":"318","endLine":102,"endColumn":20},{"ruleId":"315","severity":1,"message":"378","line":102,"column":22,"nodeType":"317","messageId":"318","endLine":102,"endColumn":35},{"ruleId":"315","severity":1,"message":"379","line":113,"column":5,"nodeType":"317","messageId":"318","endLine":113,"endColumn":16},{"ruleId":"315","severity":1,"message":"380","line":177,"column":7,"nodeType":"317","messageId":"318","endLine":177,"endColumn":21},{"ruleId":"381","severity":1,"message":"382","line":260,"column":6,"nodeType":"383","endLine":260,"endColumn":8,"suggestions":"404"},{"ruleId":"315","severity":1,"message":"342","line":338,"column":9,"nodeType":"317","messageId":"318","endLine":338,"endColumn":18},{"ruleId":"381","severity":1,"message":"405","line":340,"column":9,"nodeType":"387","endLine":340,"endColumn":43},{"ruleId":"315","severity":1,"message":"406","line":5,"column":13,"nodeType":"317","messageId":"318","endLine":5,"endColumn":18},{"ruleId":"315","severity":1,"message":"402","line":6,"column":25,"nodeType":"317","messageId":"318","endLine":6,"endColumn":33},{"ruleId":"315","severity":1,"message":"343","line":6,"column":35,"nodeType":"317","messageId":"318","endLine":6,"endColumn":44},{"ruleId":"315","severity":1,"message":"389","line":7,"column":10,"nodeType":"317","messageId":"318","endLine":7,"endColumn":18},{"ruleId":"315","severity":1,"message":"407","line":15,"column":11,"nodeType":"317","messageId":"318","endLine":15,"endColumn":18},{"ruleId":"315","severity":1,"message":"406","line":5,"column":13,"nodeType":"317","messageId":"318","endLine":5,"endColumn":18},{"ruleId":"315","severity":1,"message":"402","line":6,"column":25,"nodeType":"317","messageId":"318","endLine":6,"endColumn":33},{"ruleId":"315","severity":1,"message":"343","line":6,"column":35,"nodeType":"317","messageId":"318","endLine":6,"endColumn":44},{"ruleId":"315","severity":1,"message":"389","line":7,"column":10,"nodeType":"317","messageId":"318","endLine":7,"endColumn":18},{"ruleId":"315","severity":1,"message":"407","line":15,"column":11,"nodeType":"317","messageId":"318","endLine":15,"endColumn":18},{"ruleId":"311","replacedBy":"408"},{"ruleId":"313","replacedBy":"409"},{"ruleId":"315","severity":1,"message":"343","line":1,"column":34,"nodeType":"317","messageId":"318","endLine":1,"endColumn":43},{"ruleId":"315","severity":1,"message":"345","line":6,"column":8,"nodeType":"317","messageId":"318","endLine":6,"endColumn":15},{"ruleId":"315","severity":1,"message":"346","line":8,"column":3,"nodeType":"317","messageId":"318","endLine":8,"endColumn":22},{"ruleId":"315","severity":1,"message":"347","line":9,"column":3,"nodeType":"317","messageId":"318","endLine":9,"endColumn":21},{"ruleId":"315","severity":1,"message":"321","line":10,"column":3,"nodeType":"317","messageId":"318","endLine":10,"endColumn":18},{"ruleId":"315","severity":1,"message":"410","line":12,"column":8,"nodeType":"317","messageId":"318","endLine":12,"endColumn":12},{"ruleId":"315","severity":1,"message":"338","line":21,"column":11,"nodeType":"317","messageId":"318","endLine":21,"endColumn":16},{"ruleId":"315","severity":1,"message":"355","line":40,"column":11,"nodeType":"317","messageId":"318","endLine":40,"endColumn":20},{"ruleId":"315","severity":1,"message":"356","line":41,"column":11,"nodeType":"317","messageId":"318","endLine":41,"endColumn":16},{"ruleId":"315","severity":1,"message":"357","line":44,"column":7,"nodeType":"317","messageId":"318","endLine":44,"endColumn":11},{"ruleId":"315","severity":1,"message":"321","line":6,"column":10,"nodeType":"317","messageId":"318","endLine":6,"endColumn":25},{"ruleId":"315","severity":1,"message":"411","line":8,"column":21,"nodeType":"317","messageId":"318","endLine":8,"endColumn":22},{"ruleId":"315","severity":1,"message":"322","line":11,"column":3,"nodeType":"317","messageId":"318","endLine":11,"endColumn":21},{"ruleId":"315","severity":1,"message":"323","line":18,"column":26,"nodeType":"317","messageId":"318","endLine":18,"endColumn":40},{"ruleId":"315","severity":1,"message":"324","line":18,"column":42,"nodeType":"317","messageId":"318","endLine":18,"endColumn":61},{"ruleId":"315","severity":1,"message":"325","line":19,"column":10,"nodeType":"317","messageId":"318","endLine":19,"endColumn":16},{"ruleId":"315","severity":1,"message":"326","line":19,"column":18,"nodeType":"317","messageId":"318","endLine":19,"endColumn":26},{"ruleId":"315","severity":1,"message":"327","line":19,"column":28,"nodeType":"317","messageId":"318","endLine":19,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":21,"column":10,"nodeType":"317","messageId":"318","endLine":21,"endColumn":18},{"ruleId":"315","severity":1,"message":"328","line":21,"column":20,"nodeType":"317","messageId":"318","endLine":21,"endColumn":25},{"ruleId":"315","severity":1,"message":"329","line":21,"column":27,"nodeType":"317","messageId":"318","endLine":21,"endColumn":33},{"ruleId":"315","severity":1,"message":"330","line":21,"column":35,"nodeType":"317","messageId":"318","endLine":21,"endColumn":41},{"ruleId":"315","severity":1,"message":"412","line":22,"column":10,"nodeType":"317","messageId":"318","endLine":22,"endColumn":30},{"ruleId":"315","severity":1,"message":"331","line":23,"column":8,"nodeType":"317","messageId":"318","endLine":23,"endColumn":18},{"ruleId":"315","severity":1,"message":"333","line":59,"column":9,"nodeType":"317","messageId":"318","endLine":59,"endColumn":17},{"ruleId":"315","severity":1,"message":"334","line":67,"column":10,"nodeType":"317","messageId":"318","endLine":67,"endColumn":15},{"ruleId":"315","severity":1,"message":"335","line":67,"column":17,"nodeType":"317","messageId":"318","endLine":67,"endColumn":25},{"ruleId":"315","severity":1,"message":"336","line":68,"column":10,"nodeType":"317","messageId":"318","endLine":68,"endColumn":15},{"ruleId":"315","severity":1,"message":"337","line":68,"column":17,"nodeType":"317","messageId":"318","endLine":68,"endColumn":25},{"ruleId":"315","severity":1,"message":"338","line":75,"column":9,"nodeType":"317","messageId":"318","endLine":75,"endColumn":14},{"ruleId":"315","severity":1,"message":"339","line":78,"column":18,"nodeType":"317","messageId":"318","endLine":78,"endColumn":27},{"ruleId":"315","severity":1,"message":"340","line":85,"column":9,"nodeType":"317","messageId":"318","endLine":85,"endColumn":10},{"ruleId":"315","severity":1,"message":"341","line":103,"column":13,"nodeType":"317","messageId":"318","endLine":103,"endColumn":19},"no-native-reassign",["413"],"no-negated-in-lhs",["414"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useStore' is defined but never used.","'useLayoutEffect' is defined but never used.","'PositionalAudio' is defined but never used.","'enemyPositionState' is defined but never used.","'useRecoilValue' is defined but never used.","'useResetRecoilState' is defined but never used.","'useBox' is defined but never used.","'usePlane' is defined but never used.","'useSphere' is defined but never used.","'Route' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'GameOverUI' is defined but never used.","'history' is assigned a value but never used.","'newScore' is assigned a value but never used.","'rings' is assigned a value but never used.","'setRings' is assigned a value but never used.","'score' is assigned a value but never used.","'setScore' is assigned a value but never used.","'reset' is assigned a value but never used.","'setExpand' is assigned a value but never used.","'p' is assigned a value but never used.","'camera' is assigned a value but never used.","'nextlevel' is assigned a value but never used.","'useEffect' is defined but never used.","'pointcheckerPositionState' is defined but never used.","'Effects' is defined but never used.","'MeshDistortMaterial' is defined but never used.","'MeshWobbleMaterial' is defined but never used.","'wind' is defined but never used.","'useTrimesh' is defined but never used.","'points' is assigned a value but never used.","'point' is assigned a value but never used.","'leftbox' is assigned a value but never used.","'boxgeo' is assigned a value but never used.","'boxmat' is assigned a value but never used.","'direction' is assigned a value but never used.","'speed' is assigned a value but never used.","'time' is assigned a value but never used.","'AdditiveBlending' is defined but never used.","'meteors' is assigned a value but never used.","'ringPositionState' is defined but never used.","'api' is assigned a value but never used.","'mat' is assigned a value but never used.","'useRef' is defined but never used.","'meteorPositionState' is defined but never used.","'Stars' is defined but never used.","'SpaceShip' is defined but never used.","'LowpolySpaceship' is defined but never used.","'BlackMeteor' is defined but never used.","'WhiteMeteor' is defined but never used.","'PointChecker' is defined but never used.","'UI' is defined but never used.","'Perf' is defined but never used.","'ENEMY_SPEED' is assigned a value but never used.","'InfiniteRings' is defined but never used.","'theta' is assigned a value but never used.","'z' is assigned a value but never used.","'smallrings' is assigned a value but never used.","'setsmallRings' is assigned a value but never used.","'elapsedTime' is assigned a value but never used.","'CameraControls' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'meteor' and 'setMeteor'. Either include them or remove the dependency array.","ArrayExpression",["415"],"'Meteors' is defined but never used.","The 'audio' object construction makes the dependencies of useEffect Hook (at line 546) change on every render. To fix this, wrap the initialization of 'audio' in its own useMemo() Hook.","VariableDeclarator","'Link' is defined but never used.","'useFrame' is defined but never used.","'secref' is assigned a value but never used.","'minref' is assigned a value but never used.","'totalSeconds' is assigned a value but never used.","'timer' is assigned a value but never used.","'timerText' is assigned a value but never used.","'pad' is defined but never used.","The 'audio' object construction makes the dependencies of useEffect Hook (at line 49) change on every render. To fix this, wrap the initialization of 'audio' in its own useMemo() Hook.","React Hook useEffect has missing dependencies: 'resetFalse', 'resetLifeline', and 'resetScore'. Either include them or remove the dependency array.",["416"],"The 'audio' object construction makes the dependencies of useEffect Hook (at line 29) change on every render. To fix this, wrap the initialization of 'audio' in its own useMemo() Hook.","React Hook useEffect has missing dependencies: 'resetFalse', 'resetLifeline', 'resetScore', and 'setNextLevelFalse'. Either include them or remove the dependency array.",["417"],"'useState' is defined but never used.","'scoreState' is defined but never used.",["418"],"The 'audio' object construction makes the dependencies of useEffect Hook (at line 348) change on every render. To fix this, wrap the initialization of 'audio' in its own useMemo() Hook.","'THREE' is defined but never used.","'actions' is assigned a value but never used.",["413"],["414"],"'life' is defined but never used.","'a' is defined but never used.","'createBrowserHistory' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"419","fix":"425"},"Update the dependencies array to be: [meteor, setMeteor]",{"range":"426","text":"427"},"Update the dependencies array to be: [resetFalse, resetLifeline, resetScore]",{"range":"428","text":"429"},"Update the dependencies array to be: [resetFalse, resetLifeline, resetScore, setNextLevelFalse]",{"range":"430","text":"431"},{"range":"432","text":"427"},[8162,8164],"[meteor, setMeteor]",[586,588],"[resetFalse, resetLifeline, resetScore]",[699,701],"[resetFalse, resetLifeline, resetScore, setNextLevelFalse]",[7178,7180]]